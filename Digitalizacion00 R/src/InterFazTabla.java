

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.io.File;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.jnativehook.GlobalScreen;

import chrriis.dj.nativeswing.swtimpl.NativeInterface;

/**
 *
 * @author Coco
 */



public class InterFazTabla extends javax.swing.JFrame {

    /**
     * Creates new form InterFazTabla
     */
    DefaultListModel listaServ = new DefaultListModel();

    Object[][] tablaDocumentos;
   // int tipoDocumento = 2; //	Determina el tipo de documento para las coordenadas del ianus
    					   //   1	Ingresos/Urg/Rx
    						//	2	Consultas
    						//	3	CIA
    						//	4	Anulacion
    
    //	variables para el autocopiado en ianus
    int retardo = 1500;
    boolean autocopiar = true;
    int pantallasIanus = 4; // 1 una pantalla
    						// 2 dos pantallas
    						// 3 pantalla izquierda
    						// 4 pantalla derecha
    
    boolean editarBotonAzul1 = true;
    
    public InterFazTabla() {

    	InicioIanus.tipoDocAsubir = 2;	//	Determina el tipo de documento para las coordenadas del ianus
									    //  1	Ingresos/Urg/Rx
										//	2	Consultas
										//	3	CIA
										//	4	Anulacion
    	
        setTitle("Nombres Normalizados");
		//	Determinar número de pantallas
		GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
		GraphicsDevice[] gs = ge.getScreenDevices();
//		System.out.println("El número de pantallas es " + gs.length);
		if(gs.length == 1) 
			pantallasIanus = 1;

        initComponents();
        
        grupoIanus.add(radioIzquierda);
        grupoIanus.add(radioDerecha);
        grupoIanus.add(radio2Ianus);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
 
/*        if(!InicioIanus.coordenadas.grabadas)
        	setLocation(780, 945);
        else
        	setLocation(InicioIanus.coordenadas.coordenadas[2].x,InicioIanus.coordenadas.coordenadas[2].y);
  */  	
/*    	if(pantallasIanus !=1){
    		setLocation(780,945);   
    	}   */
  //  	setUndecorated(true);

        grupoIanus = new javax.swing.ButtonGroup();
    	jScrollPane1 = new javax.swing.JScrollPane();
        listaHabituales = new javax.swing.JList();
        listaHabituales2 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaServicio = new javax.swing.JList();
        InicioIanus.comboServicios = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        radioBLCompleto = new javax.swing.JRadioButton();
        jSpinner1 = new javax.swing.JSpinner();
        jCheckBoxAuto = new javax.swing.JCheckBox();
        jCheckBoxTurbo = new javax.swing.JCheckBox();
        radioIzquierda = new javax.swing.JRadioButton();
        radioDerecha = new javax.swing.JRadioButton();
        radio2Ianus = new javax.swing.JRadioButton();
        
        listaDocUrgencias = new DefaultListModel();
        listaDocUrgencias = InicioIanus.excel.getDocServicio("URG");
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        listaHabituales.setBackground(new java.awt.Color(255, 255, 204));
        listaHabituales.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        listaHabituales.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        listaHabituales2.setBackground(new java.awt.Color(255, 255, 204));
        listaHabituales2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        listaHabituales2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);        
        

        listaHabituales.setModel(InicioIanus.excel.listaHabituales);
        listaHabituales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaHabitualesMouseClicked(evt);
            }
        });
        
        listaHabituales2.setModel(InicioIanus.excel.getHabituales2());
        listaHabituales2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaHabituales2MouseClicked(evt);
            }
        });
        
        jScrollPane1.setViewportView(listaHabituales);
        jScrollPane3.setViewportView(listaHabituales2);

 
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("ALG");
        jLabel3.setToolTipText("");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(retardo/100, 8, 40, 1));
        jSpinner1.setToolTipText("Décimas de segundo. Máx 40, Min 8");
    	jSpinner1.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent e) {
				// Ponemos el valor del JSpinner en retardo
				retardo =  100 * (Integer) jSpinner1.getValue();
			}	
		});        
        

 //       listaServicio.setSelectedIndex(0);
        listaServicio.setBackground(new java.awt.Color(255, 255, 204));
        listaServicio.setFont(new java.awt.Font("Tahoma",1, 11)); // NOI18N
        listaServicio.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaServicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaServicioMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(listaServicio);

        InicioIanus.comboServicios.setMaximumRowCount(20);
        InicioIanus.comboServicios.setToolTipText("Selecciona el Servicio");
        int j = InicioIanus.excel.getServicios().length;
        String[] itemNuevo = new String[j];
        itemNuevo = InicioIanus.excel.getServicios();
        for(int i=0;i<j;i++){
            InicioIanus.comboServicios.addItem(itemNuevo[i]);
        }
        if(InicioIanus.documentacion != 0 && InicioIanus.documentacion != 3){
            InicioIanus.comboServicios.setSelectedIndex(0);
            InicioIanus.servicioCombo = InicioIanus.comboServicios.getSelectedItem().toString();
        }else{
        	InicioIanus.tipoDocAsubir = 1;
        	InicioIanus.comboServicios.setSelectedItem("URG");
        	InicioIanus.servicioCombo = InicioIanus.comboServicios.getSelectedItem().toString();
        	listaServicio.setModel(InicioIanus.excel.getDocServicio("URG"));
        }

        InicioIanus.comboServicios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboServiciosMouseClicked(evt);
            }
        });
        InicioIanus.comboServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboServiciosActionPerformed1(evt);
            }
        });


        
    	jSpinner1.setVisible(false);   // Desaparece el spinner en modo autoTotal
    	
        jCheckBoxAuto.setSelected(true);
        jCheckBoxAuto.setText("Auto");
        jCheckBoxAuto.setToolTipText("Copiado automático a Ianus.");       
        jCheckBoxAuto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxAutoItemStateChanged(evt);
            }
        });   
        
        jCheckBoxTurbo.setSelected(true);
        jCheckBoxTurbo.setText("S. C.");
        jCheckBoxTurbo.setToolTipText("No pide confirmación a la hora de subir");
        jCheckBoxTurbo.addItemListener(new ItemListener(){

			@Override
			public void itemStateChanged(ItemEvent arg0) {
				// TODO Auto-generated method stub

				
			      if(jCheckBoxTurbo.isSelected()){
			    	  InicioIanus.turbo = true;
			      }
			      else{
			        	InicioIanus.turbo = false;
			      }
			}
        	
        });
        
        //	Inicializamos los radioBotones
        
        RadioListener myListener = new RadioListener();  // clase interna implementa Actionlistener, responde a un actionperformed
        
 //       if(pantallasIanus ==1) {
        	radioIzquierda.setVisible(false);
        	radioDerecha.setVisible(false);
        	radio2Ianus.setVisible(false);
 //       }
        
        radioIzquierda.setText("Izquierda");
        radioIzquierda.setToolTipText("Pulsar si Ianus está en la pantalla de la izquierda");
        radioIzquierda.addActionListener(myListener);
        
        radioDerecha.setText("Derecha");
        radioDerecha.setToolTipText("Pulsar si Ianus está en la pantalla de la derecha");
        radioDerecha.setSelected(true);
        radioDerecha.addActionListener(myListener);
        
        radio2Ianus.setText("2 Ianus");
        radio2Ianus.setToolTipText("Pulsar si hay un Ianus en cada pantalla");
        radio2Ianus.addActionListener(myListener);
        
        radioBLCompleto.setMnemonic('c');
        radioBLCompleto.setText("Listado");
        radioBLCompleto.setToolTipText("Lista todos los nombres de los documentos");
        radioBLCompleto.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
			      if(radioBLCompleto.isSelected()){ 
			           jLabel3.setForeground(Color.GRAY);
			           radioBLCompleto.setForeground(Color.red);
			           listaServicio.setModel(InicioIanus.excel.getTodosDocumentos());
			       }
			       else if(!radioBLCompleto.isSelected()) {
			           jLabel3.setForeground(Color.BLACK);
			           radioBLCompleto.setForeground(Color.black);
			           listaServicio.setModel(InicioIanus.excel.getDocServicio(jLabel3.getText()));
			       }
			}
        });
 
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                         .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2, 120, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, 120, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, 120, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                    	.addComponent(jCheckBoxAuto)
                        .addComponent(InicioIanus.comboServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(radioBLCompleto)
                        .addGap(0,0,0)
                        .addComponent(jCheckBoxTurbo)
                        .addGap(0,0,0)))

                .addContainerGap(1, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                		.addComponent(jCheckBoxAuto)
                		//   .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InicioIanus.comboServicios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioBLCompleto)
                    .addComponent(jCheckBoxTurbo))

     //           .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
     //           .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    //.addComponent(jCheckBoxAuto)
      //              .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
      //              .addComponent(radioIzquierda)
      //              .addComponent(radioDerecha)
      //              .addComponent(radio2Ianus))
    //            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                     //   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)))
        );
        InicioIanus.comboServicios.getAccessibleContext().setAccessibleName("");
        InicioIanus.comboServicios.getAccessibleContext().setAccessibleDescription("");

        pack();
        setVisible(true);
  /*      if(InicioIanus.coordenadas.grabadas)
        	setSize(InicioIanus.coordenadas.coordenadas[3].x,InicioIanus.coordenadas.coordenadas[3].y);
    */    
       	
        
        
        /************************    Captura las coordenadas de las pulsaciones del ratón  **********************************/
        /*
	    	CoordenadasAsociar ca = new CoordenadasAsociar();
	        GlobalScreen.getInstance().addNativeMouseListener(ca);
	        GlobalScreen.getInstance().addNativeMouseMotionListener(ca);
	        GlobalScreen.getInstance().addNativeKeyListener(ca);                 //	Teclado
    	*/
    	/**********************************************************************************************************************/
    
        
      
    
    
    
    
    }// </editor-fold>                        

    
    //	clase interna para los radioButtons
    
    class RadioListener implements ActionListener{

    	@Override
    	public void actionPerformed(ActionEvent e) {
    		// TODO Auto-generated method stub
    		if (radioIzquierda.isSelected()){
    				pantallasIanus = 3;
    				jSpinner1.setVisible(false);
    		}
    		else if(radioDerecha.isSelected()){
    			pantallasIanus = 4;
    			jSpinner1.setVisible(false);
    		}
    		else if(radio2Ianus.isSelected()){
    			pantallasIanus = 2;
    			jSpinner1.setVisible(true);
    		}
    	}
    	
    }                                    

    private void comboServiciosMouseClicked(java.awt.event.MouseEvent evt) {                                            
        
    }                                           

    private void comboServiciosActionPerformed1(java.awt.event.ActionEvent evt) {                                                
        //  Cambia la etiqueta del servicio
    	String comboElegido = InicioIanus.comboServicios.getSelectedItem().toString();
    	InicioIanus.servicioCombo = comboElegido;
        jLabel3.setText(comboElegido);
        listaHabituales.clearSelection();
        listaHabituales2.clearSelection();
        listaServicio.clearSelection();
        new CopEnPortapapeles().copiarAlPortapapeles("");
        radioBLCompleto.setSelected(false);
        listaServicio.setModel(InicioIanus.excel.getDocServicio(comboElegido));
        
  //      System.out.println(comboElegido);
        
        if(comboElegido.toLowerCase().contains("HOSP".toLowerCase()) || comboElegido.toLowerCase().contains("URG".toLowerCase())){
        	InicioIanus.tipoDocAsubir = 1;
       
        }else if(comboElegido.toLowerCase().contains("CIA".toLowerCase())){
        	InicioIanus.tipoDocAsubir = 3;
        //	System.out.println(comboElegido);
        }else{
        	InicioIanus.tipoDocAsubir = 2;
        //	System.out.println("Consulta" + comboElegido);
        }
    	// System.out.println(comboElegido);
        
    	Inicio.limpiarBotonesCoordenadas(InicioIanus.tipoDocAsubir);
               
    }                                               

   

    private void listaHabitualesMouseClicked(java.awt.event.MouseEvent evt) {                                             
        // TODO add your handling code here:
        // Copiar al portapapeles los habituales
        
    	listaServicio.clearSelection();
        listaHabituales2.clearSelection();
        
        new CopEnPortapapeles().copiarAlPortapapeles(listaHabituales.getSelectedValue().toString());
        int aux = InicioIanus.tipoDocAsubir;
        if(autocopiar && !InicioIanus.teclasAzulesEditables){        
        	RobotIanus pruebaRobot = new RobotIanus();
        	if(InicioIanus.comboServicios.getSelectedItem().toString().contains(InicioIanus.DIGC) && 
    				(listaHabituales.getSelectedValue().toString().contains(InicioIanus.ENFERMERIA_ENDOSCOPIAS) ||
					 listaHabituales.getSelectedValue().toString().contains(InicioIanus.ENDOSCOPIA_DIGESTIVA) ||
					 listaHabituales.getSelectedValue().toString().contains(InicioIanus.MANOMETRIA) ||
					 listaHabituales.getSelectedValue().toString().contains(InicioIanus.PHMETRIA)	)){
  
        			InicioIanus.tipoDocAsubir = 1; //	Subir enfermería de dig como ingreso                   
        	}

        	if(InicioIanus.comboServicios.getSelectedItem().toString().contains("HOSP") 		&& 
        			listaHabituales.getSelectedValue().toString().contains(InicioIanus.CONSENTIMIENTO)){
	        				
        			InicioIanus.tipoDocAsubir = 2;
	        
	        }
        	
        	
       	//	Cuando exporadicamente necesitamos subir a un nodo distinto un documento, utilizando ALT
        	this.imprimeInterfazTabla(evt, listaHabituales.getSelectedValue().toString());
           		
           		InicioIanus.documentosClick++;				//	Para estadisticas

           		
	            pruebaRobot.robotIanus(listaHabituales.getSelectedValue().toString(), retardo, pantallasIanus,InicioIanus.tipoDocAsubir, "",false,false);
	   	            
	            
	            /***************** Abre los siguientes pdfs  **************************************************/
	            
	            int tamañoLista = VentanaExplorador.listaPdfs.getModel().getSize();

	            if(InicioIanus.numPdfsAbiertos == 0){
	            	if(VentanaExplorador.numArchivo + 1 < tamañoLista){
	            		
	            		VentanaExplorador.numArchivo++;
	            		
	            		VentanaExplorador.listaPdfs.setSelectedIndex(VentanaExplorador.numArchivo);
	             		int pdfNumero = VentanaExplorador.listaPdfs.getSelectedIndex();
	               		
	             		InicioIanus.tandaDePdfs[0] = new File(InicioIanus.rutaCompletaPdfs[pdfNumero]);
	            		try{
//	            			Desktop.getDesktop().open(archivo);
	            			Robot robot = new Robot();
	            	//		robot.delay(400);
	            			
	            			Inicio.navegador1.webBrowser.setVisible(true);
	            			Inicio.navegador1.setPdf(InicioIanus.tandaDePdfs[0].getAbsolutePath().toString(),
	            					InicioIanus.tandaDePdfs[0].getName().toString(),new Color(80,200,120));
	            			
	            			// Coloca cursor sobre aceptar
	           			    
	           			    InicioIanus.numPdfsAbiertos = 1;
	           			    
	      /*     			    if(InicioIanus.lado == 'd')
	           			    	robot.mouseMove(1500, 700);
	           			    else
	           			    	robot.mouseMove(510, 700);   */
	            		}catch (Exception ev) {
	            			System.out.println(ev);
	            		}
	            	}
	            	if(InicioIanus.numeroIanus == 2){
	            		VentanaExplorador.numArchivo++;
	         
	            		if(VentanaExplorador.numArchivo < tamañoLista){
	                		VentanaExplorador.listaPdfs.setSelectedIndex(VentanaExplorador.numArchivo);
	                 		int pdfNumero = VentanaExplorador.listaPdfs.getSelectedIndex();
	                 		InicioIanus.pdfSeleccionado = pdfNumero;
	                 		
	                 		
	                 		InicioIanus.tandaDePdfs[1] = new File(InicioIanus.rutaCompletaPdfs[pdfNumero]);
	                		try{
//	                			Desktop.getDesktop().open(archivo);
	                			Robot robot = new Robot();
	                	//		robot.delay(400);
	                			
	                			Inicio.navegador2.webBrowser.setVisible(true);
	               			    Inicio.navegador2.setPdf(InicioIanus.tandaDePdfs[1].getAbsolutePath().toString(),
	                					InicioIanus.tandaDePdfs[1].getName().toString(), new Color(255,246,143));
	               			    
	               			    InicioIanus.numPdfsAbiertos = 2;
	               			    
	/*    	           			 robot.delay(400);
	
	               			    
	               			    // Coloca cursor sobre aceptar
	               			    if(InicioIanus.lado == 'd')
	               			    	robot.mouseMove(1500, 700);
	               			    else
	               			    	robot.mouseMove(510, 700);  */
	               			    
	               			//  Comprobar desde aqui	    
	   	           			 if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
	   	 	         			InicioIanus.teclaAzul1.setText(InicioIanus.documentos[pdfNumero].nhc);
	   	 	         			InicioIanus.teclaAzul2.setText(InicioIanus.documentos[pdfNumero].nombreNormalizado);
	   	 	         			
	   	 	         			
	   	 	         			if(InicioIanus.ocr2IanusAutomatico){
	   	 	        				InicioIanus.botonIanus1.setText(InicioIanus.nhcIanus1);
	   	 	             			InicioIanus.botonIanus2.setText(InicioIanus.nhcIanus2);
	   	 	        			}
	   	 	        			else{
	   	 	        				InicioIanus.botonIanus1.setText(InicioIanus.documentos[pdfNumero].nhc);
	   	 	        			}

	   	 	         			InicioIanus.botonServicio.setText(InicioIanus.documentos[pdfNumero].servicio);
	   	 	         			InicioIanus.botonNombreNormalizado.setText(InicioIanus.documentos[pdfNumero].nombreNormalizado);
	   	 	         			
	   	 	         			if(!InicioIanus.comboServicios.getSelectedItem().toString().contains(InicioIanus.documentos[pdfNumero].servicio)){
	   	 	         				InicioIanus.botonServicio.setBackground(Color.red);
	   	 	         				Inicio.navegador1.ocrPanel.setBackground(Color.yellow);
	   	 	         			}
	   	 	         			else{
	   	 	         				InicioIanus.botonServicio.setBackground(Color.green);
	   	 	         				Inicio.navegador1.ocrPanel.setBackground(new Color(255,222,173));
	   	 	         			}
	   	 	         			
	   	 	         			if(!InicioIanus.documentos[pdfNumero].nhc.equals(InicioIanus.documentos[pdfNumero-1].nhc)){
	   	 	         				Inicio.navegador1.ocrPanel.setBackground(Color.red);
	   	 	         				Inicio.navegador1.webBrowserPanel.setBackground(Color.red);
	   	 	         			}
	   	 	         			else{
	   	 	         				Inicio.navegador1.ocrPanel.setBackground(new Color(255,222,173));
	   	 	         				Inicio.navegador1.webBrowserPanel.setBackground(new Color(80,200,120));
	   	 	         			}
	   	 	         			
	   	 	         			InicioIanus.comboServicios.setSelectedItem(InicioIanus.documentos[pdfNumero].servicio);
	   	 	         		}
	               			    
	                		}catch (Exception ev) {
	                			System.out.println(ev);
	                		}
	                	}
	            	}
	            }      
	            

        }
        
        editarBotonesAzules(listaHabituales.getSelectedValue().toString());
        
        InicioIanus.tipoDocAsubir = aux;
        
       // if (evt.isMetaDown()) {}
    }                                            

    
    
    private void listaHabituales2MouseClicked(java.awt.event.MouseEvent evt) {                                             
        // TODO add your handling code here:
        // Copiar al portapapeles los habituales2
    	
        listaServicio.clearSelection();
        listaHabituales.clearSelection();
    	
        new CopEnPortapapeles().copiarAlPortapapeles(listaHabituales2.getSelectedValue().toString());
        int aux = InicioIanus.tipoDocAsubir;
        if(autocopiar && !InicioIanus.teclasAzulesEditables){        
        	RobotIanus pruebaRobot = new RobotIanus();
        	if(InicioIanus.comboServicios.getSelectedItem().toString().contains(InicioIanus.DIGC) && 
        				(listaHabituales2.getSelectedValue().toString().contains(InicioIanus.ENFERMERIA_ENDOSCOPIAS) ||
        				 listaHabituales2.getSelectedValue().toString().contains(InicioIanus.ENDOSCOPIA_DIGESTIVA) ||
        				 listaHabituales2.getSelectedValue().toString().contains(InicioIanus.MANOMETRIA) ||
        				 listaHabituales2.getSelectedValue().toString().contains(InicioIanus.PHMETRIA)	)){
        		
        				InicioIanus.tipoDocAsubir = 1; //	Subir enfermería de dig como ingreso                  
        	
        	}
        	
        	if(InicioIanus.comboServicios.getSelectedItem().toString().contains("HOSP") 		&& 
        			listaHabituales2.getSelectedValue().toString().contains(InicioIanus.CONSENTIMIENTO)){
	        				
        			InicioIanus.tipoDocAsubir = 2;
	        
	        }
        	
          	//	Cuando exporadicamente necesitamos subir a un nodo distinto un documento, utilizando ALT
        	this.imprimeInterfazTabla(evt, listaHabituales2.getSelectedValue().toString());
           		
       		InicioIanus.documentosClick++;				//	Para estadisticas
        	
        	
	            pruebaRobot.robotIanus(listaHabituales2.getSelectedValue().toString(), retardo, pantallasIanus, InicioIanus.tipoDocAsubir, "",false,false);
	            	            
	            /***************** Abre los siguientes pdfs  **************************************************/
	            
	            int tamañoLista = VentanaExplorador.listaPdfs.getModel().getSize();

	            if(InicioIanus.numPdfsAbiertos == 0){
	            	if(VentanaExplorador.numArchivo + 1 < tamañoLista){
	            		
	            		VentanaExplorador.numArchivo++;
	            		
	            		VentanaExplorador.listaPdfs.setSelectedIndex(VentanaExplorador.numArchivo);
	             		int pdfNumero = VentanaExplorador.listaPdfs.getSelectedIndex();
	             		InicioIanus.pdfSeleccionado = pdfNumero;
	             		
	             		
	             		InicioIanus.tandaDePdfs[0] = new File(InicioIanus.rutaCompletaPdfs[pdfNumero]);
	            		try{
//	            			Desktop.getDesktop().open(archivo);
	            			Robot robot = new Robot();
	            	//		robot.delay(400);
	            	   		
	            			Inicio.navegador1.webBrowser.setVisible(true);
	            			Inicio.navegador1.setPdf(InicioIanus.tandaDePdfs[0].getAbsolutePath().toString(),
	            					InicioIanus.tandaDePdfs[0].getName().toString(),new Color(80,200,120));
	           			    // Coloca cursor sobre aceptar
	           			    
	           			    InicioIanus.numPdfsAbiertos = 1;
	    /*       			    
	           			    if(InicioIanus.lado == 'd')
	           			    	robot.mouseMove(1500, 700);
	           			    else
	           			    	robot.mouseMove(510, 700);   */
	           			    
	           			//  Comprobar desde aqui	    
		           			 if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
		 	         			InicioIanus.teclaAzul1.setText(InicioIanus.documentos[pdfNumero].nhc);
		 	         			InicioIanus.teclaAzul2.setText(InicioIanus.documentos[pdfNumero].nombreNormalizado);
		 	         			
		 	         			
		 	         			if(InicioIanus.ocr2IanusAutomatico){
		 	        				InicioIanus.botonIanus1.setText(InicioIanus.nhcIanus1);
		 	             			InicioIanus.botonIanus2.setText(InicioIanus.nhcIanus2);
		 	        			}
		 	        			else{
		 	        				InicioIanus.botonIanus1.setText(InicioIanus.documentos[pdfNumero].nhc);
		 	        			}

		 	         			InicioIanus.botonServicio.setText(InicioIanus.documentos[pdfNumero].servicio);
		 	         			InicioIanus.botonNombreNormalizado.setText(InicioIanus.documentos[pdfNumero].nombreNormalizado);
		 	         			
		 	         			if(!InicioIanus.comboServicios.getSelectedItem().toString().contains(InicioIanus.documentos[pdfNumero].servicio)){
		 	         				InicioIanus.botonServicio.setBackground(Color.red);
		 	         				Inicio.navegador1.ocrPanel.setBackground(Color.yellow);
		 	         			}
		 	         			else{
		 	         				InicioIanus.botonServicio.setBackground(Color.green);
		 	         				Inicio.navegador1.ocrPanel.setBackground(new Color(255,222,173));
		 	         			}
		 	         			
		 	         			if(!InicioIanus.documentos[pdfNumero].nhc.equals(InicioIanus.documentos[pdfNumero-1].nhc)){
		 	         				Inicio.navegador1.ocrPanel.setBackground(Color.red);
		 	         				Inicio.navegador1.webBrowserPanel.setBackground(Color.red);
		 	         			}
		 	         			else{
		 	         				Inicio.navegador1.ocrPanel.setBackground(new Color(255,222,173));
		 	         				Inicio.navegador1.webBrowserPanel.setBackground(new Color(80,200,120));
		 	         			}
		 	         			
		 	         			InicioIanus.comboServicios.setSelectedItem(InicioIanus.documentos[pdfNumero].servicio);
		 	         		}
	           			    
	            		}catch (Exception ev) {
	            			System.out.println(ev);
	            		}
	            	}
	            	if(InicioIanus.numeroIanus == 2){
	            		VentanaExplorador.numArchivo++;
	         
	            		if(VentanaExplorador.numArchivo < tamañoLista){
	                		VentanaExplorador.listaPdfs.setSelectedIndex(VentanaExplorador.numArchivo);
	                 		int pdfNumero = VentanaExplorador.listaPdfs.getSelectedIndex();
	                
	                 		InicioIanus.tandaDePdfs[1] = new File(InicioIanus.rutaCompletaPdfs[pdfNumero]);
	                		try{
//	                			Desktop.getDesktop().open(archivo);
	                			Robot robot = new Robot();
	                	//		robot.delay(400);
	                			
	                			Inicio.navegador2.webBrowser.setVisible(true);
	               			    Inicio.navegador2.setPdf(InicioIanus.tandaDePdfs[1].getAbsolutePath().toString(),
	                					InicioIanus.tandaDePdfs[1].getName().toString(), new Color(255,246,143));
	               			    
	               			    InicioIanus.numPdfsAbiertos = 2;
	               			    
	/*    	           			 robot.delay(400);
	    	         			//	Ajusta los documentos horizontalmente
	
	               			    
	               			    // Coloca cursor sobre aceptar
	               			    if(InicioIanus.lado == 'd')
	               			    	robot.mouseMove(1500, 700);
	               			    else
	               			    	robot.mouseMove(510, 700);    */
	                		}catch (Exception ev) {
	                			System.out.println(ev);
	                		}
	                	}
	            	}
	            }      
        }
  
        editarBotonesAzules(listaHabituales2.getSelectedValue().toString());
 
        InicioIanus.tipoDocAsubir = aux;
    }        
    
    private void listaServicioMouseClicked(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        // Copiar al portapapeles el documento seleccionado
    	
        listaHabituales.clearSelection();
        listaHabituales2.clearSelection();
    	
        new CopEnPortapapeles().copiarAlPortapapeles(listaServicio.getSelectedValue().toString());
        int aux = InicioIanus.tipoDocAsubir;
        if(autocopiar && !InicioIanus.teclasAzulesEditables){
        	RobotIanus pruebaRobot = new RobotIanus();
        	if(InicioIanus.comboServicios.getSelectedItem().toString().contains(InicioIanus.DIGC) && 
        			(listaServicio.getSelectedValue().toString().contains(InicioIanus.ENFERMERIA_ENDOSCOPIAS) ||
           			 listaServicio.getSelectedValue().toString().contains(InicioIanus.ENDOSCOPIA_DIGESTIVA) ||
           			 listaServicio.getSelectedValue().toString().contains(InicioIanus.MANOMETRIA) ||
           			 listaServicio.getSelectedValue().toString().contains(InicioIanus.PHMETRIA)	)){
        		
        			InicioIanus.tipoDocAsubir = 1; //	Subir enfermería de dig como ingreso                 
        	
        	}
        	
        	if(InicioIanus.comboServicios.getSelectedItem().toString().contains("HOSP") 		&& 
        			listaServicio.getSelectedValue().toString().contains(InicioIanus.CONSENTIMIENTO)){
	        				
        			InicioIanus.tipoDocAsubir = 2;
	        
	        }
        	
          	//	Cuando exporadicamente necesitamos subir a un nodo distinto un documento, utilizando ALT
        	this.imprimeInterfazTabla(evt, listaServicio.getSelectedValue().toString());
 
       		InicioIanus.documentosClick++;				//	Para estadisticas
        	
	        	pruebaRobot.robotIanus(listaServicio.getSelectedValue().toString(), retardo, pantallasIanus, InicioIanus.tipoDocAsubir, "",false,false);
	            
	        	
	        	/***************** Abre los siguientes pdfs  **************************************************/
	            
	            int tamañoLista = VentanaExplorador.listaPdfs.getModel().getSize();

	            if(InicioIanus.numPdfsAbiertos == 0){
	            	if(VentanaExplorador.numArchivo + 1 < tamañoLista){
	            		
	            		VentanaExplorador.numArchivo++;
	            		
	            		VentanaExplorador.listaPdfs.setSelectedIndex(VentanaExplorador.numArchivo);
	             		int pdfNumero = VentanaExplorador.listaPdfs.getSelectedIndex();
	             		InicioIanus.pdfSeleccionado = pdfNumero;
	             		
	             		
	             		InicioIanus.tandaDePdfs[0] = new File(InicioIanus.rutaCompletaPdfs[pdfNumero]);
	            		try{

	            			Robot robot = new Robot();
	            	//		robot.delay(400);
	
	            			Inicio.navegador1.webBrowser.setVisible(true);
	                   		Inicio.navegador1.setPdf(InicioIanus.tandaDePdfs[0].getAbsolutePath().toString(),
	            					InicioIanus.tandaDePdfs[0].getName().toString(),new Color(80,200,120));
	            			
	           			    // Coloca cursor sobre aceptar
	         			    
	           			    InicioIanus.numPdfsAbiertos = 1;
	           		
	           			//  Comprobar desde aqui	    
	           			 if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
	 	         			InicioIanus.teclaAzul1.setText(InicioIanus.documentos[pdfNumero].nhc);
	 	         			InicioIanus.teclaAzul2.setText(InicioIanus.documentos[pdfNumero].nombreNormalizado);
	 	         			
	 	         			
	 	         			if(InicioIanus.ocr2IanusAutomatico){
	 	        				InicioIanus.botonIanus1.setText(InicioIanus.nhcIanus1);
	 	             			InicioIanus.botonIanus2.setText(InicioIanus.nhcIanus2);
	 	        			}
	 	        			else{
	 	        				InicioIanus.botonIanus1.setText(InicioIanus.documentos[pdfNumero].nhc);
	 	        			}

	 	         			InicioIanus.botonServicio.setText(InicioIanus.documentos[pdfNumero].servicio);
	 	         			InicioIanus.botonNombreNormalizado.setText(InicioIanus.documentos[pdfNumero].nombreNormalizado);
	 	         			
	 	         			if(!InicioIanus.comboServicios.getSelectedItem().toString().contains(InicioIanus.documentos[pdfNumero].servicio)){
	 	         				InicioIanus.botonServicio.setBackground(Color.red);
	 	         				Inicio.navegador1.ocrPanel.setBackground(Color.yellow);
	 	         			}
	 	         			else{
	 	         				InicioIanus.botonServicio.setBackground(Color.green);
	 	         				Inicio.navegador1.ocrPanel.setBackground(new Color(255,222,173));
	 	         			}
	 	         			
	 	         			if(!InicioIanus.documentos[pdfNumero].nhc.equals(InicioIanus.documentos[pdfNumero-1].nhc)){
	 	         				Inicio.navegador1.ocrPanel.setBackground(Color.red);
	 	         				Inicio.navegador1.webBrowserPanel.setBackground(Color.red);
	 	         			}
	 	         			else{
	 	         				Inicio.navegador1.ocrPanel.setBackground(new Color(255,222,173));
	 	         				Inicio.navegador1.webBrowserPanel.setBackground(new Color(80,200,120));
	 	         			}
	 	         			
	 	         			InicioIanus.comboServicios.setSelectedItem(InicioIanus.documentos[pdfNumero].servicio);
	 	         		}
	       /*    			    
	           			    if(InicioIanus.lado == 'd')
	           			    	robot.mouseMove(1500, 700);
	           			    else
	           			    	robot.mouseMove(510, 700);     */
	            		}catch (Exception ev) {
	            			System.out.println(ev);
	            		}
	            	}
	            	if(InicioIanus.numeroIanus == 2){
	            		VentanaExplorador.numArchivo++;
	         
	            		if(VentanaExplorador.numArchivo < tamañoLista){
	                		VentanaExplorador.listaPdfs.setSelectedIndex(VentanaExplorador.numArchivo);
	                 		int pdfNumero = VentanaExplorador.listaPdfs.getSelectedIndex();
	                
	                 		InicioIanus.tandaDePdfs[1] = new File(InicioIanus.rutaCompletaPdfs[pdfNumero]);
	                		try{
//	                			Desktop.getDesktop().open(archivo);
	                			Robot robot = new Robot();
	                	//		robot.delay(400);
	               			    
	                			Inicio.navegador2.webBrowser.setVisible(true);
	                			Inicio.navegador2.setPdf(InicioIanus.tandaDePdfs[1].getAbsolutePath().toString(),
	                					InicioIanus.tandaDePdfs[1].getName().toString(), new Color(255,246,143));
	               			    
	               			    InicioIanus.numPdfsAbiertos = 2;
	   /*            			    
	    	           			 robot.delay(400);

	               			    
	               			    // Coloca cursor sobre aceptar
	               			    if(InicioIanus.lado == 'd')
	               			    	robot.mouseMove(1500, 700);
	               			    else
	               			    	robot.mouseMove(510, 700);    */
	                		}catch (Exception ev) {
	                			System.out.println(ev);
	                		}
	                	}
	            	}
	            } 
        }
        
        editarBotonesAzules(listaServicio.getSelectedValue().toString());
        
        InicioIanus.tipoDocAsubir = aux;
    }                                          

    
    private void editarBotonesAzules(String nombreDoc){
        if(InicioIanus.teclasAzulesEditables){
        	if(editarBotonAzul1){
        		InicioIanus.teclaAzul1.setText(nombreDoc);
        		editarBotonAzul1 = false;
        	}
        	else{
        		InicioIanus.teclaAzul2.setText(nombreDoc);
        		editarBotonAzul1 = true;
        	}

        }
    }
    
    
    private void jCheckBoxAutoItemStateChanged(java.awt.event.ItemEvent evt) {
        if(!jCheckBoxAuto.isSelected()){
            jSpinner1.setVisible(false);
            radioIzquierda.setVisible(false);
            radioDerecha.setVisible(false);
            radio2Ianus.setVisible(false);
            autocopiar = false;
        }
        else{
        	if(pantallasIanus !=1){
        		radioIzquierda.setVisible(true);
        		radioDerecha.setVisible(true);
        		radio2Ianus.setVisible(true);        	
        		if(radio2Ianus.isSelected())
        			jSpinner1.setVisible(true);
        	}
            autocopiar = true;
        }
    }

    
	public void imprimeInterfazTabla(java.awt.event.MouseEvent evt, String documento){
       	if(evt.isAltDown()){   
       		/*
           	if(InicioIanus.comboServicios.getSelectedItem().toString().contains("HOSP")){
           		Object[] nodos = new Object[]{"Consultas", "CIA"};
           		int z = new VentanaConfirmacion().getConfirmacion(documento,nodos);
           		if(z == 1){
           			InicioIanus.tipoDocAsubir = 2;	//	Consultas
           		}else if(z==2){
           			InicioIanus.tipoDocAsubir = 3;	//	CIA
           		}
           	}else if(InicioIanus.comboServicios.getSelectedItem().toString().contains("CIA")){
           		Object[] nodos = new Object[]{"Consultas","Ingresos"};
           		int z = new VentanaConfirmacion().getConfirmacion(documento,nodos);
           		if(z == 1){
           			InicioIanus.tipoDocAsubir = 2;	//	Consultas
           		}else if(z==2){
           			InicioIanus.tipoDocAsubir = 1;	//	Ingresos
           		}              		
           	}else{
          		Object[] nodos = new Object[]{"Ingresos","CIA"};
           		int z = new VentanaConfirmacion().getConfirmacion(documento,nodos);
           		if(z == 1){
           			InicioIanus.tipoDocAsubir = 1;	//	Ingresos
           		}else if(z==2){
           			InicioIanus.tipoDocAsubir = 3;	//	CIA
           		}
           	}
           	*/
       		
       		int z = new VentanaConfirmacion().getConfirmacion(documento);
       		if(z == 1){
       			InicioIanus.tipoDocAsubir = 2;	//	Consultas
       			//System.out.println("Consulta");
       		}else if(z==2){
       			InicioIanus.tipoDocAsubir = 1;	//	Hospitalización
       			//System.out.println("Ingreso");
       		}else if(z==3){
       			InicioIanus.tipoDocAsubir = 3;  //  CIA
       			//System.out.println("CIA");
       		}
       	}
	}
    
    // Variables declaration - do not modify                     
    //private javax.swing.JComboBox comboServicios;
    private javax.swing.JCheckBox jCheckBoxAuto;
    private javax.swing.JCheckBox jCheckBoxTurbo;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3; 
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JList listaHabituales;
    private javax.swing.JList listaHabituales2;    
    private javax.swing.JList listaServicio;
    private javax.swing.JRadioButton radioBLCompleto;
    private javax.swing.ButtonGroup grupoIanus;
    private javax.swing.JRadioButton radioIzquierda;
    private javax.swing.JRadioButton radioDerecha;   
    private javax.swing.JRadioButton radio2Ianus;   
    DefaultListModel listaDocUrgencias;
    
    // End of variables declaration                   
}

// new Object[]{"Consultas", "CIA","Cancelar"}

class VentanaConfirmacion{
	private int valido;
	
	int getConfirmacion(String documentoSeleccionado){
		
		JLabel etiquetaFormateada = new JLabel(documentoSeleccionado);
		etiquetaFormateada.setFont(new Font("Verdana", Font.BOLD, 16));
		etiquetaFormateada.setForeground(Color.blue);

		Object[] nodos = new Object[]{"Consultas","Hospitalización","CIA"};
		try{
		Robot robot = new Robot();
		Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
		int dx = d.width/2;
		int dy = d.height/2;
		robot.mouseMove(dx, dy);
		}catch (AWTException e){
			e.printStackTrace();
		}
		
		valido = JOptionPane.showOptionDialog(null, etiquetaFormateada, "Seleccion de Nodo", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, nodos ,"Consultas");
		
		return valido+1;
	}
	
}