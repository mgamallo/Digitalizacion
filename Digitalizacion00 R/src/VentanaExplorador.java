import java.awt.AWTException;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;

import org.jnativehook.GlobalScreen;

import chrriis.dj.nativeswing.swtimpl.NativeInterface;

public class VentanaExplorador extends javax.swing.JFrame {

    /**
     * Creates new form VentanaExplorador
     */
    public VentanaExplorador() {
    	
   	
        boolean comodin = false;
        if(InicioIanus.documentacion != 0 && InicioIanus.documentacion != 3){
            ArrayList<String> listaNovedades = InicioIanus.excel.getNovedadesDoc(InicioIanus.usuario);
            if(!listaNovedades.get(0).toString().contains("N")){
            	new VentanaMensajes(listaNovedades);
            	comodin = true;
            }
            ArrayList<String> listaMensajesNuevos = InicioIanus.excel.getMensajesNuevosDoc(InicioIanus.usuario);
            if(!listaMensajesNuevos.get(0).toString().contains("N")){
            	new VentanaMensajesAvisos(listaMensajesNuevos);
            	comodin = true;
            }
            
            ArrayList<String> listaDocumentosNuevos = InicioIanus.excel.getDocYmodelNuevos(InicioIanus.usuario);
            if(!listaDocumentosNuevos.get(0).toString().contains("N")){
            	new VentanaMensajeDocNuevo(listaDocumentosNuevos);
            	comodin = true;
            }
            
            if(comodin){
            	JOptionPane.showMessageDialog(this, "Pulsa aceptar, \n y espera unos segundos...");
                new BorrarNovedades("Documentos.xls", InicioIanus.excel.getNumUsuario(InicioIanus.documentacion));
            }
        }else{
           ArrayList<String> listaNovedades = InicioIanus.excel.getNovedadesUrg(InicioIanus.usuario);
           if(!listaNovedades.get(0).toString().contains("N")){
            	new VentanaMensajes(listaNovedades);
            	comodin = true;
            } 
        	
        	ArrayList<String> listaMensajesNuevos = InicioIanus.excel.getMensajesNuevosUrg(InicioIanus.usuario);
            if(!listaMensajesNuevos.get(0).toString().contains("N")){
            	new VentanaMensajesAvisos(listaMensajesNuevos);
            	comodin = true;
            }
            if(comodin){
            	JOptionPane.showMessageDialog(this, "Pulsa aceptar, \n" + "y espera unos segundos...");
                new BorrarNovedades("Documentos.xls", InicioIanus.excel.getNumUsuario(InicioIanus.documentacion));
            }
        }

    	dudasResueltas = dudasContestadas(InicioIanus.usuario);
        if(dudasResueltas){
    		JOptionPane.showMessageDialog(null, "¡¡ Tienes dudas contestadas !!");
        }
        
         initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaPdfs = new javax.swing.JList();
        
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();					//	Carpeta			
        jMenuItem1 = new javax.swing.JMenuItem();			//	Abrir Carpeta	
        jMenuItem2 = new javax.swing.JMenuItem();			//	Consultar Carpeta
        jSeparadorVigo = new javax.swing.JSeparator();
        jMenuItemVigo = new javax.swing.JMenuItem();		//	Abrir carpeta Vigo
        jSeparadorU = new javax.swing.JSeparator();
        jMenu5 = new javax.swing.JMenu("Dudas");			//	Dudas
        jMenuItem51 = new javax.swing.JMenuItem("Enviar a Dudas");				//	Enviar a Dudas
        jMenuItem52 = new javax.swing.JMenuItem("Abrir carpeta Dudas");				//	Abrir carpeta Dudas
        jMenuItem54	= new JMenuItem("Consultar carpeta Dudas");						//	Consultar carpeta dudas
        jMenuItem53 = new javax.swing.JMenuItem("Enviar a Asociados");				//	Enviar a Asociados

        jSeparadorM = new javax.swing.JSeparator();
        jMenu2 = new javax.swing.JMenu();					//	Incidencias
        jMenuItem23 = new javax.swing.JMenuItem("Apartar pdf");					//	Apartar pdf
        jSeparadorD = new javax.swing.JSeparator();

        jMenu3 = new javax.swing.JMenu();					//	Cerrar sesión
        jMenuItem22 = new javax.swing.JMenuItem("Ya subidas");					//	Ya subidas
        jSeparador01 = new JSeparator();
        jSeparador02 = new JSeparator();

        jMenuItem31 = new javax.swing.JMenuItem();			//	Guardar carpetas
        jMenuItem32 = new javax.swing.JMenuItem();			//	Guardar preferencias
        jMenuItem33 = new javax.swing.JMenuItem();			//	Guardar todo
        jMenuItem34 = new javax.swing.JMenuItem();			//	Salir
        
        jMenuV = new JMenu("Ayuda");																	//	Documentos
        jMenuItemV1 = new JMenuItem("Por Servicio");		jMenuItemV1.setEnabled(true);					//	Por Servicio
        jMenuItemV2 = new JMenuItem("Por palabras clave");	jMenuItemV2.setEnabled(true);					//	Por palabra clave
        jMenuItemV3 = new JMenuItem("Por nombre del documento");			jMenuItemV3.setEnabled(true);	//	Por nombre del documento
        
        
        jMenuCalibre = new JMenu("Calibrar");				//	Menu Calibrar
        jMenuItemCon = new JMenuItem("Consulta");			//	Solo coordenadas consultas
        jMenuItemIng = new JMenuItem("Ingr/Urg/Rx");		//	Solo coordenadas Ingresos
        jMenuItemCma = new JMenuItem("CMA");				//	Solo coordenadas CMA
        jMenuItemAn	 = new JMenuItem("Doc. Anulados");		//	Solo coordenadas Doc. Anulados
        
        jMenuNormas = new JMenu("Documentos");						//	Menu Normas
        jMenuItemServicio = new JMenuItem("Listado Normas");
     //   jMenuItemTodas = new JMenuItem("Todas");
        jSeparadorV = new JSeparator();

        jMenuAñadirNormas = new JMenu("Añadir");
        jMenuItemAñadirDocumentos = new JMenuItem("Documentos Nuevos");
        jSeparador03 = new JSeparator();
        jMenuItemAñadirAvisos = new JMenuItem("Avisos");
        jMenuItemAñadirModelos = new JMenuItem("Modelo Nuevo");
        jMenuItemAñadirNormas = new JMenuItem("Normas Nuevas");

        jSeparador04 = new JSeparator();
        jMenuModificar = new JMenu("Modificar");
        jMenuItemModifModelos = new JMenuItem("Modelos");
        
        jMenuCrono = new JMenu("!");
        jMenuItemCrono = new JMenuItem("Reloj");
        jMenuItemEstadistica = new JMenuItem("Estadistica");
        
        jLabel1 = new javax.swing.JLabel();
        etiquetaVacia = new javax.swing.JLabel();
        
                
   /*     if(!InicioIanus.coordenadas.grabadas)
        	setLocation(785, 1);
        else
        	setLocation(InicioIanus.coordenadas.coordenadas[0].x,InicioIanus.coordenadas.coordenadas[0].y);
*/
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        
        jMenu1.setText("Carpeta");
        
        if(InicioIanus.documentacion == 0 || InicioIanus.documentacion == 3){
        //	jMenuItem51.setEnabled(false);
        //	jMenuItem52.setEnabled(false);
        //	jMenuItem53.setEnabled(false);
        //	jMenuItem54.setEnabled(false);
        	jMenuItem23.setEnabled(false);
        	jMenuItem31.setEnabled(true);
        	jMenuItem32.setEnabled(false);
        	jMenuItem33.setEnabled(false);
        }
               
        jMenuItem1.setText("Abrir Carpeta");
        jMenuItem1.setToolTipText("Añade el nombre del usuario a la carpeta seleccionada");
        jMenuItem1.addActionListener(
        		new ActionListener(){
        			public void actionPerformed(ActionEvent evento){
        				      				
        				
        				VentanaExplorador.triggerVigo = false;
        				
        				InicioIanus.par = false;
        				CargaListaPdfs pdfs = new CargaListaPdfs(true);
        				if(pdfs.cargado == true){
        					int tamaño = pdfs.nombrePdfs.length;
        					tamañoLista = tamaño;
        					InicioIanus.rutaCompletaPdfs = new String[tamaño];
        					rutaCompletaPdfs = new String[tamaño];
        					objetoPuente = new Object[tamañoLista];	//	Para pasar los datos a un jOptionPane (ya subidos)
    					
        					modelo = new DefaultListModel();

        					//	Almacena las carpetas por las que navega el usuario
        					if(tamaño>0){
        						String aux = pdfs.rutaPdfs[0];
        						int auxInt = aux.lastIndexOf("\\");
        						aux = aux.substring(0,auxInt);
        						auxInt = aux.lastIndexOf("\\");
        						aux = aux.substring(0, auxInt);
        					//	System.out.println(aux);
        						InicioIanus.carpetasAbiertas.add(aux);
        					}
        					
        					if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){    // Si utilizamos el método experimental
        						InicioIanus.documentos = new DocumentoProp[tamaño];  
        					}
        					
        					modelo = new DefaultListModel();
        					for(int i=0;i<tamaño;i++){
        						objetoPuente[i] = pdfs.nombrePdfs[i];
        						rutaCompletaPdfs[i] = pdfs.rutaPdfs[i];
        						InicioIanus.rutaCompletaPdfs[i] = pdfs.rutaPdfs[i];
        						if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
        							//System.out.println("fichero numero... " + i);
            						InicioIanus.documentos[i] = new DocumentoProp(InicioIanus.rutaCompletaPdfs[i]);
            						//InicioIanus.documentos[i].imprimePropiedades();
        						}
        						if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
        							
        							String nhc = InicioIanus.documentos[i].nhc;
        							String espaciosEnBlanco = "";
        							int numDigitos = 9 - nhc.length();
        							for(int z = 0;z<numDigitos;z++){
        								espaciosEnBlanco += "_";
        							}
        							nhc = espaciosEnBlanco + nhc;
        							
        							String nombreFormateado = pdfs.nombrePdfs[i].substring(0, 4) + " " + nhc + "   " +
        									InicioIanus.documentos[i].nombreNormalizado;
        							modelo.addElement(nombreFormateado);
        						}
        						else{
        							modelo.addElement(pdfs.nombrePdfs[i]);
        						}
        						
        						
        						
        					}
 
        					//	Determina el directorio firmados
        					        					
        					listaPdfs.setModel(modelo);
  //      					listaPdfs.setFont(new Font("Arial",Font.BOLD,10));
        			    	setTitle(pdfs.getRutaCarpeta());
        					InicioIanus.ficherosCargados= true;
        				}
        		        if(InicioIanus.ficherosCargados){
        		        	if(InicioIanus.ventanaNombresAbierta == false){
	        		        	java.awt.EventQueue.invokeLater(new Runnable() {
	
	        		        		public void run() {
	        		        	        jMenu3.setEnabled(true);
	        		        	        jMenu2.setEnabled(true);
	        		        	        jMenuItem51.setEnabled(true);

	        		        			InicioIanus.ventanaD = new InterFazTabla();
	        		        			InicioIanus.ventanaD.setBounds(Inicio.coordenadasVentanas.vTabla);
	        		        			InicioIanus.ventanaD.setVisible(true);
	        		        			if(InicioIanus.documentacion == 0 || InicioIanus.documentacion == 3){
	        		        				InicioIanus.ventanaBotonesTeclas = new VentanaBotonesDocMini();
	        		        				InicioIanus.ventanaBotonesTeclas.setBounds(Inicio.coordenadasVentanas.vTeclas);
	        		        				InicioIanus.ventanaBotonesTeclas.comboVentanas.setSelectedItem(InicioIanus.ventanaBotonesTeclaAtributo);
	        		        			}else{
	        		        				InicioIanus.ventanaBotonesTeclas = new VentanaBotonesDocMini();
	        		        				InicioIanus.ventanaBotonesTeclas.setBounds(Inicio.coordenadasVentanas.vTeclas);
	        		        				InicioIanus.ventanaBotonesTeclas.comboVentanas.setSelectedItem(InicioIanus.ventanaBotonesTeclaAtributo);
	        		        			}
	        		        			
	        		        		}
	        		        	});
	        		        	InicioIanus.ventanaNombresAbierta = true;
	        		        	
        		        	}
        		        }
        		        
        		        
        			}
        		});
        
        jMenuItem2.setText("Consultar Carpeta");
        jMenuItem2.setToolTipText("No añade el nombre del usuario a la carpeta seleccionada");
        jMenuItem2.addActionListener(
	       		new ActionListener(){
	    			public void actionPerformed(ActionEvent evento){
	    				
	    				VentanaExplorador.triggerVigo = false;
	    				
        				InicioIanus.par = false;
        				CargaListaPdfs pdfs = new CargaListaPdfs(false);
        				if(pdfs.cargado == true){
        					int tamaño = pdfs.nombrePdfs.length;
        					tamañoLista = tamaño;
        					InicioIanus.rutaCompletaPdfs = new String[tamaño];
        					rutaCompletaPdfs = new String[tamaño];
           					objetoPuente = new Object[tamañoLista];	//	Para pasar los datos a un jOptionPane (ya subidos       					
        					
        					//	Almacena las carpetas por las que navega el usuario
           					if(tamaño>0){
        						String aux = pdfs.rutaPdfs[0];
        						int auxInt = aux.lastIndexOf("\\");
        						aux = aux.substring(0,auxInt);
        						auxInt = aux.lastIndexOf("\\");
        						aux = aux.substring(0, auxInt);
        					//	System.out.println(aux);
        						InicioIanus.carpetasAbiertas.add(aux);
        					}
           					
        					if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){    // Si utilizamos el método experimental
        						InicioIanus.documentos = new DocumentoProp[tamaño];  
        					}
        					
        					modelo = new DefaultListModel();
        					for(int i=0;i<tamaño;i++){
        						objetoPuente[i] = pdfs.nombrePdfs[i];
        						rutaCompletaPdfs[i] = pdfs.rutaPdfs[i];
        						InicioIanus.rutaCompletaPdfs[i] = pdfs.rutaPdfs[i];
        						if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
            						InicioIanus.documentos[i] = new DocumentoProp(InicioIanus.rutaCompletaPdfs[i]);
            						//InicioIanus.documentos[i].imprimePropiedades();
        						}
        						modelo.addElement(pdfs.nombrePdfs[i]);
						
        					}
 
    					
        					
        					listaPdfs.setModel(modelo);
        					listaPdfs.ensureIndexIsVisible(listaPdfs.getSelectedIndex());
  //      					listaPdfs.setFont(new Font("Arial",Font.BOLD,10));
        			    	setTitle(pdfs.getRutaCarpeta());
        					InicioIanus.ficherosCargados= true;
        				}
        		        if(InicioIanus.ficherosCargados){
        		        	if(InicioIanus.ventanaNombresAbierta == false){
	        		        	java.awt.EventQueue.invokeLater(new Runnable() {
	
	        		        		public void run() {
	        		        	        jMenu3.setEnabled(true);
	        		        	        jMenu2.setEnabled(true);
	        		        	        jMenuItem51.setEnabled(true);
	        		        			InicioIanus.ventanaD = new InterFazTabla();
	        		        			InicioIanus.ventanaD.setBounds(Inicio.coordenadasVentanas.vTabla);
	        		        			InicioIanus.ventanaD.setVisible(true);
	        		        			
	        		        			if(InicioIanus.documentacion == 0 || InicioIanus.documentacion == 3){
	        		        				InicioIanus.ventanaBotonesTeclas = new VentanaBotonesDocMini();
	        		        				InicioIanus.ventanaBotonesTeclas.setBounds(Inicio.coordenadasVentanas.vTeclas);
	        		        				InicioIanus.ventanaBotonesTeclas.comboVentanas.setSelectedItem(InicioIanus.ventanaBotonesTeclaAtributo);
	        		        			}else{
	        		        				InicioIanus.ventanaBotonesTeclas = new VentanaBotonesDocMini();
	        		        				InicioIanus.ventanaBotonesTeclas.setBounds(Inicio.coordenadasVentanas.vTeclas);
	        		        				InicioIanus.ventanaBotonesTeclas.comboVentanas.setSelectedItem(InicioIanus.ventanaBotonesTeclaAtributo);
	        		        			}
	        		        		}
	        		        	});
	        		        	InicioIanus.ventanaNombresAbierta = true;
	        		        	InicioIanus.gestion2ianusIniciada = false;
        		        	}
        		        }
        			}	
	    				    			
	        });
        
        //	Para subir documentacion de Vigo
        jMenuItemVigo.setText("Documentacion Vigo");
        jMenuItemVigo.setToolTipText("Añade el nombre del usuario a la carpeta seleccionada");
        jMenuItemVigo.addActionListener(
        		new ActionListener(){
        			public void actionPerformed(ActionEvent evento){
        				     				
        				cerrarAutoHotKey();
        				
        				InicioIanus.par = false;
        				CargaListaPdfs pdfs = new CargaListaPdfs(true);
        				if(pdfs.cargado == true){
        					int tamaño = pdfs.nombrePdfs.length;
        					tamañoLista = tamaño;
        					InicioIanus.rutaCompletaPdfs = new String[tamaño];
        					rutaCompletaPdfs = new String[tamaño];
        					objetoPuente = new Object[tamañoLista];	//	Para pasar los datos a un jOptionPane (ya subidos)
    					
        					modelo = new DefaultListModel();
        					
        					InicioIanus.documentacionVigo = true;

        					//	Almacena las carpetas por las que navega el usuario
        					if(tamaño>0){
        						String aux = pdfs.rutaPdfs[0];
        						int auxInt = aux.lastIndexOf("\\");
        						aux = aux.substring(0,auxInt);
        						carpetaAbierta = aux;
        						auxInt = aux.lastIndexOf("\\");
        						aux = aux.substring(0, auxInt);
        					//	System.out.println(aux);
        						InicioIanus.carpetasAbiertas.add(aux);
        					}
        					
        					
        					for(int i=0;i<tamaño;i++){
        						modelo.addElement(pdfs.nombrePdfs[i]);
        						objetoPuente[i] = pdfs.nombrePdfs[i];
        						rutaCompletaPdfs[i] = pdfs.rutaPdfs[i];
        						InicioIanus.rutaCompletaPdfs[i] = pdfs.rutaPdfs[i];
        						
        						
        						System.out.println(pdfs.rutaPdfs[i]);
        					}
 
        					//	Determina el directorio firmados
        					        					
        					listaPdfs.setModel(modelo);
  //      					listaPdfs.setFont(new Font("Arial",Font.BOLD,10));
        			    	setTitle(pdfs.getRutaCarpeta());
        			    	
        					System.out.println("La ruta es...: " + carpetaAbierta);

        					VentanaExplorador.triggerVigo = true;
        					InicioIanus.ficherosCargados= true;
        					
        				}
        		        if(InicioIanus.ficherosCargados){
        		        	if(InicioIanus.ventanaNombresAbierta == false){
	        		        	java.awt.EventQueue.invokeLater(new Runnable() {
	
	        		        		public void run() {
	        		        	        jMenu3.setEnabled(true);
	        		        	        jMenu2.setEnabled(true);
	        		        	        jMenuItem51.setEnabled(true);

	        		        			InicioIanus.ventanaD = new InterFazTabla();
	        		        			InicioIanus.ventanaD.setVisible(true);
	        		        	/*		if(!InicioIanus.documentacion){
		        		        			new VentanaUrgencias1().setVisible(true);
	        		        			}else{
	        		        				new VentanaAuxiliarBotones(nombresUsuales);
	        		        			}
	        		        	*/
	        		        		//	JOptionPane.showMessageDialog(null, "Espera unos segundos. Se va a realizar una copia de archivos");
	        		        			crearCarpetaEspejo(carpetaAbierta);
	        		        			docVigo = new DocumentosVigo(true);					//	Subir documentos Vigo
	        		        		}
	        		        	});
	        		        	InicioIanus.ventanaNombresAbierta = true;
	        		        	InicioIanus.gestion2ianusIniciada = false;
        		        	}
        		        }
        			}
        		});
        
        
        
        jMenuItem51.setEnabled(false);        
        jMenuItem51.setToolTipText("Envia un pdf a la carpeta Dudas");
        jMenuItem52.setEnabled(true);
        jMenuItem52.setToolTipText("Abre la carpeta Dudas personal. \n Elimina automáticamente las observaciones de los pdfs");
        jMenuItem54.setToolTipText("Abre la carpeta Dudas personal. \n No elimina las observaciones de los pdfs");
        if(!dudasResueltas)
        	jMenuItem53.setEnabled(false);
        jMenuItem53.setToolTipText("Al cerrar sesión, envía el contenido de dudas a la carpeta asociados");
        
        jMenuItem51.addActionListener(new ActionListener(){			//	Enviar a dudas	

 			@Override
 			public void actionPerformed(ActionEvent arg0) {
 				// TODO Auto-generated method stub
 				
 				cerrarAutoHotKey();
 				
  				Inicio.navegador1.webBrowser.navigate("");
  	  			Inicio.navegador1.webBrowser.setVisible(false);
  	  			
  				if(InicioIanus.numeroIanus == 2){
  					Inicio.navegador2.webBrowser.navigate("");
  	  				Inicio.navegador2.webBrowser.setVisible(false);
  				}
 				
 				
 				Object seleccion = JOptionPane.showInputDialog(null,"Selecciona el documento a enviar a dudas","Enviar a dudas",JOptionPane.QUESTION_MESSAGE,null,objetoPuente,listaPdfs.getSelectedValue());
 				if(seleccion.toString() != null){
 					Object comentario = JOptionPane.showInputDialog(null,"Escribe un breve comentario sobre la duda","Mensaje duda",JOptionPane.QUESTION_MESSAGE);
 					if(comentario.toString() != null){
 						CerrarTodo cerrar = new CerrarTodo();
 						cerrar.closePdf();
 					
 						/*if(Inicio.navegador1.webBrowserPanel.getBackground() == new Color(80,200,120)){
 							Inicio.navegador1.webBrowser.navigate("");
 						}
 						else if(Inicio.navegador2.webBrowserPanel.getBackground() == new Color(80,200,120)){
 							Inicio.navegador2.webBrowser.navigate("");
 						}
 						*/
 						
 						Inicio.navegador1.webBrowser.navigate("");
 							
 				//		System.out.println(seleccion.toString());
 						
 						int indice = objetoPuente.length;
 						int i=0;
 						while(!(objetoPuente[i].toString().contains(seleccion.toString()))&& i<indice){
 							i++;
 						}
 						MoverCarpetas mv = new MoverCarpetas();
 						if(mv.moverPdf(i, comentario.toString(),false)){						//	false significa mover pdf a Dudas
 							int j = InicioIanus.rutaCompletaPdfs[0].lastIndexOf("\\");
 							if(j != 0){
 								String ruta = InicioIanus.rutaCompletaPdfs[0].substring(0, j);
 								
 								FileFilter filtro = new FileFilter(){

 									@Override
 									public boolean accept(File fichero) {
 										// TODO Auto-generated method stub
 										
 										if(!fichero.isDirectory() && fichero.getName().endsWith("pdf")){
 											return true;
 										}
 										return false;
 									}
 								};
 								
 								File recargar = new File(ruta);
 								File[] nuevosPdfs = recargar.listFiles(filtro);
 								int tamaño = nuevosPdfs.length;
 								
 								InicioIanus.rutaCompletaPdfs = new String[tamaño];
 								
 								modelo = new DefaultListModel();
 								objetoPuente = new Object[nuevosPdfs.length];
 								InicioIanus.documentos = new DocumentoProp[nuevosPdfs.length];
 																
 								for(int k=0;k<nuevosPdfs.length;k++){
 									objetoPuente[k] = nuevosPdfs[k].getName();
 									//modelo.addElement(nuevosPdfs[k].getName());
 									InicioIanus.rutaCompletaPdfs[k] = nuevosPdfs[k].getAbsolutePath().toString();
 									String nombreFormateado = "";
 									if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
 	            						InicioIanus.documentos[k] = new DocumentoProp(InicioIanus.rutaCompletaPdfs[k]);
 									
 	            						String nhc = InicioIanus.documentos[k].nhc;
 	        							String espaciosEnBlanco = "";
 	        							int numDigitos = 9 - nhc.length();
 	        							for(int z = 0;z<numDigitos;z++){
 	        								espaciosEnBlanco += "_";
 	        							}
 	        							nhc = espaciosEnBlanco + nhc;
 	        							nombreFormateado = nuevosPdfs[k].getName().substring(0, 4) + " " + nhc + "   " +
 	        									InicioIanus.documentos[k].nombreNormalizado;
 	        							modelo.addElement(nombreFormateado);
 									}
 									else{
 										modelo.addElement(nuevosPdfs[k].getName());
 									}
 								}
 								listaPdfs.setModel(modelo);
 							}
 							
 						}
 					}
					
 				}
 				 abrirAutoHotKey();
 			}
         	
         });
        

        jMenuItem52.addActionListener(new ActionListener(){				//	Abrir carpeta dudas
        	public void actionPerformed(ActionEvent arg0){
        		
    			JOptionPane.showMessageDialog(null, "¡¡Aviso!! \n No renombrar los pdfs.El programa automáticamente elimina las observaciones " +
    					"en el nombre del pdf a la hora de asociar.");

    			VentanaExplorador.triggerVigo = false;
        		
        		String ruta = InicioIanus.RUTA;

        		if(!(new File(ruta).exists())){
        			ruta = InicioIanus.RUTAB;
        		}
        		File ficherosDudas = new File(ruta);
        		if(ficherosDudas.exists()){
	        		int ind = ruta.lastIndexOf("/");
	        		String aux = ruta;
	        		aux= ruta.substring(0, ind);
	        		aux+= "/99 Dudas/" + InicioIanus.usuario + " C";
	        		ficherosDudas = new File(aux);
	        		if(ficherosDudas.exists()){
	        			aux+= (" " + InicioIanus.usuario);
	        			File directorioNuevo = new File(aux);
	        			ficherosDudas.renameTo(directorioNuevo);
	        			
	        			FileFilter filtro = new FileFilter(){
	        				public boolean accept(File fichero){
	        					if(!fichero.isDirectory() && fichero.getName().endsWith("pdf")){
	        						return true;
	        					}
	        					return false;
	        				}
	        			};
	        			
	        			File cargarDudas = new File(aux);
	        			File[] pdfsDudas = cargarDudas.listFiles(filtro);
	        			int tamaño = pdfsDudas.length;
	        			tamañoLista= tamaño;
	        			InicioIanus.rutaCompletaPdfs = new String[tamaño];
	        			rutaCompletaPdfs = new String[tamaño];
	        			InicioIanus.par=false;
	        			
	        			modelo = new DefaultListModel();
	        			objetoPuente = new Object[tamaño];
	        			
	        			for(int i=0;i<tamaño;i++){
	        				//	Renombramos los ficheros, no los nombres de la lista
	        				String renombre =pdfsDudas[i].getName();
	        				int j= renombre.lastIndexOf("¿");
	        				renombre=renombre.substring(j+2);
	        				String nuevoPath = cargarDudas.getAbsolutePath() + "\\" + renombre;
	        				//	System.out.println(nuevoPath);
	        				
	        				File viejoNombre = new File(pdfsDudas[i].getAbsolutePath());
	        				File nuevoNombre = new File(nuevoPath);
	        				if(!viejoNombre.renameTo(nuevoNombre)){
	        					JOptionPane.showMessageDialog(null, "Error al renombrar el fichero. Asociar las dudas a mano.");
	        					break;
	        				}
	        				
	        				rutaCompletaPdfs[i] = nuevoPath;
	        				InicioIanus.rutaCompletaPdfs[i] = nuevoPath;
	        				objetoPuente[i] = renombre;
	        				modelo.addElement(pdfsDudas[i].getName());
	        			//	modelo.addElement(renombre);
	        				
	        			}
	        			listaPdfs.setModel(modelo);
	        			setTitle("Dudas " + InicioIanus.usuario);
	        		//	System.out.println("En construcción");
	        			
	        			InicioIanus.ficherosCargados=true;
       		        	if(InicioIanus.ficherosCargados){
		        			if(InicioIanus.ventanaNombresAbierta == false){
	       		        		java.awt.EventQueue.invokeLater(new Runnable() {
		       		        		
		    		        		public void run() {
		    		        			jMenu5.getItem(2).setVisible(true);
		    		        			jMenu2.setEnabled(true);
		    		        			jMenu3.setEnabled(true);
		    		        			jMenuItem53.setEnabled(true);
		    		        			InicioIanus.ventanaD = new InterFazTabla();
		    		        			InicioIanus.ventanaD.setVisible(true);
		    		        		}
		    		        	});
		    		        	InicioIanus.ventanaNombresAbierta = true;
		           			}
       		        	}
	        		}
        		}
        	}
        
        	
        });
        
        
        jMenuItem54.addActionListener(new ActionListener(){				//	Consultar carpeta dudas
        	public void actionPerformed(ActionEvent arg0){
        		
    			JOptionPane.showMessageDialog(null, "No se van a eliminar las observaciones " +
    					"en el nombre del pdf.");

    			VentanaExplorador.triggerVigo = false;
        		
        		String ruta = InicioIanus.RUTA;

        		if(!(new File(ruta).exists())){
        			ruta = InicioIanus.RUTAB;
        		}
        		File ficherosDudas = new File(ruta);
        		if(ficherosDudas.exists()){
	        		int ind = ruta.lastIndexOf("/");
	        		String aux = ruta;
	        		aux= ruta.substring(0, ind);
	        		aux+= "/99 Dudas/" + InicioIanus.usuario + " C";
	        		ficherosDudas = new File(aux);
	        		if(ficherosDudas.exists()){

	        			FileFilter filtro = new FileFilter(){
	        				public boolean accept(File fichero){
	        					if(!fichero.isDirectory() && fichero.getName().endsWith("pdf")){
	        						return true;
	        					}
	        					return false;
	        				}
	        			};
	        			
	        			File cargarDudas = new File(aux);
	        			File[] pdfsDudas = cargarDudas.listFiles(filtro);
	        			int tamaño = pdfsDudas.length;
	        			tamañoLista= tamaño;
	        			InicioIanus.rutaCompletaPdfs = new String[tamaño];
	        			rutaCompletaPdfs = new String[tamaño];
	        			InicioIanus.par=false;
	        			
	        			modelo = new DefaultListModel();
	        			objetoPuente = new Object[tamaño];
	        			
	        			for(int i=0;i<tamaño;i++){
	        				
	        				rutaCompletaPdfs[i] = pdfsDudas[i].getAbsolutePath();
	        				InicioIanus.rutaCompletaPdfs[i] = pdfsDudas[i].getAbsolutePath();
	        				objetoPuente[i] = pdfsDudas[i].getName();
	        				modelo.addElement(pdfsDudas[i].getName());
	        			//	modelo.addElement(renombre);
	        				
	        			}
	        			listaPdfs.setModel(modelo);
	        			setTitle("Dudas " + InicioIanus.usuario);
	        		//	System.out.println("En construcción");
	        			
	        			InicioIanus.ficherosCargados=true;
       		        	if(InicioIanus.ficherosCargados){
		        			if(InicioIanus.ventanaNombresAbierta == false){
	       		        		java.awt.EventQueue.invokeLater(new Runnable() {
		       		        		
		    		        		public void run() {
		    		        			jMenu5.getItem(2).setVisible(true);
		    		        			jMenu2.setEnabled(true);
		    		        			jMenu3.setEnabled(true);
		    		        			jMenuItem53.setEnabled(true);
		    		        			InicioIanus.ventanaD = new InterFazTabla();
		    		        			InicioIanus.ventanaD.setVisible(true);
		    		        		}
		    		        	});
		    		        	InicioIanus.ventanaNombresAbierta = true;
		           			}
       		        	}
	        		}
        		}
        	}
        
        	
        });
     
        
        
     
        jMenuItem53.addActionListener(new ActionListener(){				//	Enviar a carpeta asociados
        	public void actionPerformed(ActionEvent arg0){
        
        			int confirmacion = JOptionPane.showConfirmDialog(null,"¿Confirmas que quieres archivar las dudas contestadas? " +
        					"\nLa carpeta será movida una vez se guarde y cierre el programa. ","Confirmación",JOptionPane.OK_CANCEL_OPTION,JOptionPane.OK_OPTION);
        			if(confirmacion == JOptionPane.OK_OPTION){
            			InicioIanus.dudasParaAsociar = true;
            			jMenuItem53.setEnabled(false);
         			}
        	}
        });
        
        
        
        
        jMenu2.setText("Incidencias");
        jMenu2.setEnabled(false);
        jMenu2.add(jMenuItem23);jMenuItem23.setEnabled(true);
        
 
        
        
        jMenuItem22.addActionListener(new ActionListener(){			//	Ya subidos

			@Override
			public void actionPerformed(ActionEvent evento) {
				// TODO Auto-generated method stub
					            
	            
				Inicio.coordenadasVentanas.guardarCoordenadasVentana("Coordenadas.xls",InicioIanus.usuario,InicioIanus.numeroPantallas, InicioIanus.numeroIanus);
				
				Inicio.navegador1.frame.dispose();
  				Inicio.navegador2.frame.dispose();
				
  				/*
				Inicio.navegador1.webBrowser.navigate("");
  	  			Inicio.navegador1.webBrowser.setVisible(false);
  	  			
  				if(InicioIanus.numeroIanus == 2){
  					Inicio.navegador2.webBrowser.navigate("");
  	  				Inicio.navegador2.webBrowser.setVisible(false);
  				}
				*/
  				
  				
  				
				Object seleccion = JOptionPane.showInputDialog(null,"Seleccione el último documento subido","Documentos ya subidos",JOptionPane.QUESTION_MESSAGE,null,objetoPuente,listaPdfs.getSelectedValue());
				if(seleccion.toString() != null){
					CerrarTodo cerrar = new CerrarTodo();
					cerrar.close();
					

					
	        		FicheroTXT fTxt = new FicheroTXT();										//	Guarda las estadisticas en un fichero txt
	        		fTxt.escribeTXT();
	        		
	        		// GestionEstadistica ge = new GestionEstadistica();						
	        		// GuardarEstadisticaSantiago ges = new GuardarEstadisticaSantiago();		//	Guarda las estadisticas en un fichero excel
	        		// ges.leerExcel(InicioIanus.NOMBRE_FICHERO_EXCEL_ESTADISTICA,false);
					
					int indice = objetoPuente.length;
					int i=0;
					while(!(objetoPuente[i].toString().contains(seleccion.toString()))&& i<indice){
						i++;
					}
					MoverCarpetas mv = new MoverCarpetas();
					mv.moverPdfs(InicioIanus.rutaCompletaPdfs[0].toString(),i);

					
					
	            	mv.moverDudas();
	            	if(InicioIanus.documentacion != 0 && InicioIanus.documentacion != 3 ){
	                	mv.mover();
	            	}else{
	            		mv.moverCarpetasUrg();
	            	}
	            	
	            	System.exit(0);
	            	
	            	
				}
			}
        	
        });
        
        
        jMenuItem23.addActionListener(new ActionListener(){			//	Enviar a carpeta "Apartado"	

  			@Override
  			public void actionPerformed(ActionEvent arg0) {
  				// TODO Auto-generated method stub
  				
  				cerrarAutoHotKey();
  				
  				Inicio.navegador1.webBrowser.navigate("");
  	  			Inicio.navegador1.webBrowser.setVisible(false);
  	  			
  				if(InicioIanus.numeroIanus == 2){
  					Inicio.navegador2.webBrowser.navigate("");
  	  				Inicio.navegador2.webBrowser.setVisible(false);
  				}
  				
  				
  				Object seleccion = JOptionPane.showInputDialog(null,"Selecciona el documento a enviar para apartar","Apartar documento",JOptionPane.QUESTION_MESSAGE,null,objetoPuente,listaPdfs.getSelectedValue());
  				if(seleccion.toString() != null){
  					Object comentario = JOptionPane.showInputDialog(null,"Escribe un breve comentario sobre porqué se aparta el documento","Anotación",JOptionPane.QUESTION_MESSAGE);
  					if(comentario.toString() != null){
  						
  						CerrarTodo cerrar = new CerrarTodo();
  						cerrar.closePdf();
  						
  						
  						
  						
  				//		System.out.println(seleccion.toString());
  						
  						int indice = objetoPuente.length;
  						int i=0;
  						while(!(objetoPuente[i].toString().contains(seleccion.toString()))&& i<indice){
  							i++;
  						}
  						MoverCarpetas mv = new MoverCarpetas();
  						if(mv.moverPdf(i, comentario.toString(),true)){							//	true significa mover pdf a Apartados
  							int j = InicioIanus.rutaCompletaPdfs[0].lastIndexOf("\\");
  							if(j != 0){
  								String ruta = InicioIanus.rutaCompletaPdfs[0].substring(0, j);
  								
  								FileFilter filtro = new FileFilter(){

  									@Override
  									public boolean accept(File fichero) {
  										// TODO Auto-generated method stub
  										
  										if(!fichero.isDirectory() && fichero.getName().endsWith("pdf")){
  											return true;
  										}
  										return false;
  									}
  								};
  								
  								File recargar = new File(ruta);
  								File[] nuevosPdfs = recargar.listFiles(filtro);
  								int tamaño = nuevosPdfs.length;
  								
  								InicioIanus.rutaCompletaPdfs = new String[tamaño];
  								
  								modelo = new DefaultListModel();
  								objetoPuente = new Object[nuevosPdfs.length];
  								InicioIanus.documentos = new DocumentoProp[nuevosPdfs.length];
  									
  								for(int k=0;k<nuevosPdfs.length;k++){
 									objetoPuente[k] = nuevosPdfs[k].getName();
 									//modelo.addElement(nuevosPdfs[k].getName());
 									InicioIanus.rutaCompletaPdfs[k] = nuevosPdfs[k].getAbsolutePath().toString();
 									String nombreFormateado = "";
 									if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
 	            						InicioIanus.documentos[k] = new DocumentoProp(InicioIanus.rutaCompletaPdfs[k]);
 									
 	            						String nhc = InicioIanus.documentos[k].nhc;
 	        							String espaciosEnBlanco = "";
 	        							int numDigitos = 9 - nhc.length();
 	        							for(int z = 0;z<numDigitos;z++){
 	        								espaciosEnBlanco += "_";
 	        							}
 	        							nhc = espaciosEnBlanco + nhc;
 	        							nombreFormateado = nuevosPdfs[k].getName().substring(0, 4) + " " + nhc + "   " +
 	        									InicioIanus.documentos[k].nombreNormalizado;
 	        							modelo.addElement(nombreFormateado);
 									}
 									else{
 										modelo.addElement(nuevosPdfs[k].getName());
 									}
 								}
 								listaPdfs.setModel(modelo);
   							}
  							
  						}
  					}
  				}
  				 abrirAutoHotKey();
  			}
          	
          });
        	
               
        jMenuItem31.setText("Guardar Carpetas");
        jMenuItem32.setText("Guardar Preferencias");
        jMenuItem33.setText("Guardar Todo");
        jMenuItem34.setText("Salir");
        
        jMenu3.setText("Cerrar Sesión");
  //      jMenu3.setToolTipText("Guarda las posiciones de las ventanas");
        jMenu3.add(jMenuItem22);
        jMenu3.add(jSeparador01);
        jMenu3.add(jMenuItem31);jMenuItem31.setToolTipText("Guarda en asociados todas las carpetas del usuario");
       //  jMenu3.add(jMenuItem32);jMenuItem32.setToolTipText("Guarda las preferencias de localización y tamaño de las ventanas");
       // jMenu3.add(jMenuItem33);jMenuItem33.setToolTipText("Guarda las carpetas y las preferencias del usuario");
        jMenu3.add(jMenuItem34);jMenuItem34.setToolTipText("Sale sin guardar nada");
        jMenu3.setEnabled(true);
        
        
        jMenuItem31.addActionListener(new ActionListener(){			//	Guardar carpetas
        	public void actionPerformed(ActionEvent evento){
        		
        		Inicio.coordenadasVentanas.guardarCoordenadasVentana("Coordenadas.xls",InicioIanus.usuario,InicioIanus.numeroPantallas, InicioIanus.numeroIanus);
        	
  				Inicio.navegador1.frame.dispose();
  				if(InicioIanus.numeroIanus == 2){
  					Inicio.navegador2.frame.dispose();
  				}
          		
  				Robot robot;
				try {
					robot = new Robot();
					robot.delay(250);
				} catch (AWTException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
  				
        		
        		CerrarTodo cerrar = new CerrarTodo();
    		
        		FicheroTXT fTxt = new FicheroTXT();			//	Guarda las estadisticas en un fichero txt
        		fTxt.escribeTXT();
        		
        		
        		// GestionEstadistica ge = new GestionEstadistica();						
        		// GuardarEstadisticaSantiago ges = new GuardarEstadisticaSantiago();		//	Guarda las estadisticas en un fichero excel
        		 // ges.leerExcel(InicioIanus.NOMBRE_FICHERO_EXCEL_ESTADISTICA,false);

               	MoverCarpetas mov = new MoverCarpetas();
            	
            	cerrar.close();
            	mov.moverDudas();
            	if(InicioIanus.documentacion != 0 && InicioIanus.documentacion != 3){
                	mov.mover();
            	}else{
            		mov.moverCarpetasUrg();
            	}

        		fTxt.eliminaTxtErrores();
            	
            	System.exit(0);
 
        		
        	}
        });
        
        jMenuItem32.addActionListener(new ActionListener(){			//	Guardar sólo preferencias
        	public void actionPerformed(ActionEvent evento){
        		
  				Inicio.navegador1.webBrowser.navigate("");
  	  			Inicio.navegador1.webBrowser.setVisible(false);
  	  			
  				if(InicioIanus.numeroIanus == 2){
  					Inicio.navegador2.webBrowser.navigate("");
  	  				Inicio.navegador2.webBrowser.setVisible(false);
  				}
        		
  				Inicio.navegador1.frame.dispose();
  				if(InicioIanus.numeroIanus == 2){
  					Inicio.navegador2.frame.dispose();
  				}
  				
  				Robot robot;
				try {
					robot = new Robot();
					robot.delay(250);
				} catch (AWTException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
  				
        		CerrarTodo cerrar = new CerrarTodo();
        		cerrar.close();
				
        		FicheroTXT fTxt = new FicheroTXT();			//	Guarda las estadisticas en un fichero txt
        		fTxt.escribeTXT();
        		
           		// GestionEstadistica ge = new GestionEstadistica();						
        		// GuardarEstadisticaSantiago ges = new GuardarEstadisticaSantiago();		//	Guarda las estadisticas en un fichero excel
        		// ges.leerExcel(InicioIanus.NOMBRE_FICHERO_EXCEL_ESTADISTICA,false);
        		
        		GuardarPreferencias gp = new GuardarPreferencias();
				gp.guardar("Documentos.xls");
				
				System.exit(0);      		
        		
        	}
        });       
        
       
        jMenuItem33.addActionListener(										//	Guardar preferencias y carpetas
	       		new ActionListener(){
	    			public void actionPerformed(ActionEvent evento){
	    				
	      				Inicio.navegador1.webBrowser.navigate("");
	      	  			Inicio.navegador1.webBrowser.setVisible(false);
	      	  			
	      				if(InicioIanus.numeroIanus == 2){
	      					Inicio.navegador2.webBrowser.navigate("");
	      	  				Inicio.navegador2.webBrowser.setVisible(false);
	      				}
	    				
	      				Inicio.navegador1.frame.dispose();
	      				if(InicioIanus.numeroIanus == 2){
	      					Inicio.navegador2.frame.dispose();
	      				}
	    				
	      				Robot robot;
	    				try {
	    					robot = new Robot();
	    					robot.delay(250);
	    				} catch (AWTException e) {
	    					// TODO Auto-generated catch block
	    					e.printStackTrace();
	    				}
	      				
	      				
	            		CerrarTodo cerrar = new CerrarTodo();
	            		cerrar.close();
	            		
	            		FicheroTXT fTxt = new FicheroTXT();			//	Guarda las estadisticas en un fichero txt
		        		fTxt.escribeTXT();
	            		
		           	//	GestionEstadistica ge = new GestionEstadistica();						
		        	//	GuardarEstadisticaSantiago ges = new GuardarEstadisticaSantiago();		//	Guarda las estadisticas en un fichero excel
		        	//	ges.leerExcel(InicioIanus.NOMBRE_FICHERO_EXCEL_ESTADISTICA,false);
	            		
	    				GuardarPreferencias gp = new GuardarPreferencias();
	    				gp.guardar("Documentos.xls");
	    				
	    				cerrar.close();
	                  	MoverCarpetas mov = new MoverCarpetas();
	                	mov.moverDudas();
	                	mov.mover();
	    				
	    				System.exit(0);
	    			}
	    			
	        });
        
        jMenuItem34.addActionListener(										//	Salir sin hacer nada
	       		new ActionListener(){
	    			public void actionPerformed(ActionEvent evento){
	    				
	    				Inicio.navegador1.frame.dispose();
	      				if(InicioIanus.numeroIanus == 2){
	      					Inicio.navegador2.frame.dispose();
	      				}
	              		
	      				Robot robot;
	    				try {
	    					robot = new Robot();
	    					robot.delay(250);
	    				} catch (AWTException e) {
	    					// TODO Auto-generated catch block
	    					e.printStackTrace();
	    				}
	    				
	    					    				
	    				
	            		CerrarTodo cerrar = new CerrarTodo();
	            		cerrar.close();
	            		
	            	//	FicheroTXT fTxt = new FicheroTXT();			//	Guarda las estadisticas en un fichero txt
		        	//	fTxt.escribeTXT();
	            		
		           	//	GestionEstadistica ge = new GestionEstadistica();						
		        	//	GuardarEstadisticaSantiago ges = new GuardarEstadisticaSantiago();		//	Guarda las estadisticas en un fichero excel
		        	//	ges.leerExcel(InicioIanus.NOMBRE_FICHERO_EXCEL_ESTADISTICA,false);

	    			//	cerrar.close();
		    				
	    				System.exit(0);
	    			}
	    			
	        });
        
        jMenuV.add(jMenuItemV1);
        jMenuItemV1.addActionListener(new ActionListener(){				//	Visor por Servicio
        	public void actionPerformed(ActionEvent arg0){
        		cerrarAutoHotKey();
        		new InterfazVisor();
        		abrirAutoHotKey();
        	}
        });
        
        jMenuV.add(jMenuItemV2);     
        jMenuItemV2.addActionListener(new ActionListener(){				//	Visor por Metadatos
        	public void actionPerformed(ActionEvent arg0){
        		cerrarAutoHotKey();
        		new InterfazVisorMeta();
        		abrirAutoHotKey();
        	}
        });
        
        
        jMenuV.add(jMenuItemV3);
        jMenuItemV3.addActionListener(new ActionListener(){				//	Visor por nombreDocumento
        	public void actionPerformed(ActionEvent arg0){
        		cerrarAutoHotKey();
        		new InterfazVisorNomDoc();
        		abrirAutoHotKey();
        	}
        });

        
        jMenuCalibre.add(jMenuItemCon);
        jMenuItemCon.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				cerrarAutoHotKey();
        		new VentanaCalibrador("Consultas");        				//	Calibrar Consultas
			
			}
        	
        });
        jMenuCalibre.add(jMenuItemIng);
        jMenuItemIng.addActionListener(new ActionListener(){			//	Calibrar Ingresos
        	public void actionPerformed(ActionEvent evento){
        		cerrarAutoHotKey();
        		new VentanaCalibrador("Ingresos");        		
        	}
        });
        jMenuCalibre.add(jMenuItemCma);
        jMenuItemCma.addActionListener(new ActionListener(){			//	Calibrar CMA
        	public void actionPerformed(ActionEvent evento){
        		cerrarAutoHotKey();
        		new VentanaCalibrador("CMA");        		
        	}
        });
        
        jMenuCalibre.add(jMenuItemAn);	
        jMenuItemAn.addActionListener(new ActionListener(){			//	Calibrar Anulacion
        	public void actionPerformed(ActionEvent evento){
        		cerrarAutoHotKey();
        		new VentanaCalibrador("Anulados");        		
        	}
        });
        

        if(InicioIanus.documentacion == 0 || InicioIanus.documentacion == 3){
        	jMenuCalibre.setEnabled(false);
        }
        
        
        jMenuNormas.add(jMenuItemServicio); jMenuItemServicio.setEnabled(true);
        jMenuItemServicio.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				new TablaNormas();
			}
        	
        });
    //    jMenuNormas.add(jMenuItemTodas); jMenuItemTodas.setEnabled(false);
        jMenuNormas.add(jSeparadorV);
        jMenuNormas.add(jMenuAñadirNormas);
        
        jMenuAñadirNormas.add(jMenuItemAñadirDocumentos);
        jMenuAñadirNormas.add(jSeparador03);
        jMenuAñadirNormas.add(jMenuItemAñadirAvisos);
        jMenuAñadirNormas.add(jMenuItemAñadirModelos);
        jMenuAñadirNormas.add(jMenuItemAñadirNormas);
        if(InicioIanus.documentacion == 0 || InicioIanus.documentacion == 3){
        	jMenuItemAñadirModelos.setEnabled(false);
        	jMenuItemAñadirNormas.setEnabled(false);
        	jMenuItemAñadirDocumentos.setEnabled(false);
        	jMenuItemModifModelos.setEnabled(false);
        }
        
        
 
        
        jMenuItemAñadirAvisos.addActionListener(new ActionListener(){			//	Menu añadir avisos
        	public void actionPerformed(ActionEvent evento){
        		cerrarAutoHotKey();
        		// new VentanaNormas();    
        		new VentanaAñadirAvisos();
        	}
        });
        
        jMenuItemAñadirDocumentos.addActionListener(new ActionListener(){			//	Menu añadir avisos
        	public void actionPerformed(ActionEvent evento){
        		cerrarAutoHotKey();
        		// new VentanaNormas();    
        		new VentanaAñadirDocumentos("Documento");
        	}
        });  
        
        jMenuItemAñadirModelos.addActionListener(new ActionListener(){			//	Menu añadir Modelos nuevos de documentos
        	public void actionPerformed(ActionEvent evento){
        		cerrarAutoHotKey();
        		// new VentanaNormas();    
        		new VentanaAñadirDocumentos("Modelo");
        	}
        });
        
        jMenuItemAñadirNormas.addActionListener(new ActionListener(){			//	Menu añadir normas
        	public void actionPerformed(ActionEvent evento){
        		cerrarAutoHotKey();
        		// new VentanaNormas();    
        		new VentanaAñadirMensajes();
        	}
        });
        
        jMenuNormas.add(jSeparador04);
        jMenuNormas.add(jMenuModificar);
        jMenuModificar.add(jMenuItemModifModelos);
        jMenuItemModifModelos.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				cerrarAutoHotKey();
				new InterfazVisorMetaAñadir();
				System.out.println(InicioIanus.auxRutaImagen);
				new VentanaModificarDocumentos("Modelo");
			}
        	
        });

        
        jMenuCrono.add(jMenuItemCrono);
        jMenuCrono.add(jMenuItemEstadistica);
        
        jMenuItemCrono.addActionListener(new ActionListener(){			//	Menu crono
        	public void actionPerformed(ActionEvent evento){
        		new VentanaCrono();        		
        	}
        });
        
       // jMenuItemEstadistica.setEnabled(false);
        jMenuItemEstadistica.addActionListener(new ActionListener(){			//	Menu estadistica
        	public void actionPerformed(ActionEvent evento){
        		/*
        		  for(int i=0;i<InicioIanus.estadisticaSantiago.size();i++){
        		 
        			System.out.println(InicioIanus.estadisticaSantiago.get(i).nombreServicio + "\t" +
        								InicioIanus.estadisticaSantiago.get(i).nombreDocumento + "\t" +
        								(InicioIanus.estadisticaSantiago.get(i).tamañoDocumento/1024));
        		}
        		
        		*/
        		

	        	FicheroTXT fTXT = new FicheroTXT();
	        	fTXT.abreFicherosTXT();
	   /*     	
	        	for(int i = 0; i<InicioIanus.lecturaDatosEstadiscosSantiago.size();i++){
					System.out.println(i + "\t" + InicioIanus.lecturaDatosEstadiscosSantiago.get(i).nombreServicio + "\t" +
													InicioIanus.lecturaDatosEstadiscosSantiago.get(i).nombreDocumento + "\t" +
													InicioIanus.lecturaDatosEstadiscosSantiago.get(i).tamañoDocumento);
	        	}
        */
	        	
	        	InicioIanus.estadisticaSantiago.clear();
	        	InicioIanus.estadisticaSantiago.addAll(InicioIanus.lecturaDatosEstadiscosSantiago);
	        	
	        	GestionEstadistica ge = new GestionEstadistica(true);
	        	
           						
	        	GuardarEstadisticaSantiago ges = new GuardarEstadisticaSantiago();		//	Guarda las estadisticas en un fichero excel
	        	ges.leerExcel(InicioIanus.NOMBRE_FICHERO_EXCEL_ESTADISTICA,true);
	        	
	        	
	     /*   	
	        	for(int i = 0; i<InicioIanus.lecturaDatosEstadiscosSantiago.size();i++){
					System.out.println(i + "\t" + InicioIanus.estadisticaSantiago.get(i).nombreServicio + "\t" +
													InicioIanus.estadisticaSantiago.get(i).nombreDocumento + "\t" +
													InicioIanus.estadisticaSantiago.get(i).tamañoDocumento);
	        	}
	       */
	        	
	        	
	        	
        		//	InicioIanus.estadistica.imprimir();    
        	//	new GuardarEstadisticas("Documentos.xls");
        	}
        });      
        
        
        
                
        jScrollPane1.setViewportView(listaPdfs);
                        
        jMenu1.add(jMenuItem1);			//	Abrir carpeta
        jMenu1.add(jMenuItem2);			//	Consultar carpeta
        jMenu1.add(jSeparadorVigo);
        jMenu1.add(jMenuItemVigo);		//	Abrir carpeta Vigo
        jMenu1.add(jSeparadorU);
        
     //   if(InicioIanus.documentacion) 
        	jMenu1.add(jMenu5);				//	Menú dudas
        
        jMenu5.add(jMenuItem51);			//	Enviar a Dudas
        jMenu5.add(jSeparador02);
        jMenu5.add(jMenuItem52);			//	Abrir carpeta dudas
        jMenu5.add(jMenuItem54);			//	Consultar carpeta dudas
        jMenu5.add(jMenuItem53);			//	Enviar a Asociados

        jMenu1.add(jSeparadorM);
        jMenu1.add(jMenu2);				//	Incidencias
        jMenu1.add(jSeparadorD);
        jMenu1.add(jMenu3);				//	Cerrar
        
        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenuV);
        jMenuBar1.add(jMenuNormas);
        
        jMenuBar1.add(jMenuCalibre);  
        
        jMenuBar1.add(jMenuCrono);
        
        jLabel1.setForeground(Color.BLUE);

        setJMenuBar(jMenuBar1);
        
        listaPdfs.addMouseListener(new MouseAdapter(){
        	public void mouseClicked(MouseEvent evt){


        		
				InicioIanus.par = false;        		
        		numArchivo = listaPdfs.getSelectedIndex();
        		InicioIanus.pdfSeleccionado = numArchivo;
        		int tamañoLista = listaPdfs.getModel().getSize();
  
        		
        		InicioIanus.tandaDePdfs[0] = new File(InicioIanus.rutaCompletaPdfs[numArchivo]);
        		
        		Inicio.navegador1.webBrowser.setVisible(true);
        		Inicio.navegador1.setPdf(InicioIanus.tandaDePdfs[0].getAbsolutePath().toString(),
    					InicioIanus.tandaDePdfs[0].getName().toString(), new Color(80,200,120));
        			
        		InicioIanus.numPdfsAbiertos = 1;   //	Número de pdfs abiertos en pantalla
        		
        		if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
        			InicioIanus.teclaAzul1.setText(InicioIanus.documentos[numArchivo].nhc);
        			InicioIanus.teclaAzul2.setText(InicioIanus.documentos[numArchivo].nombreNormalizado);
         			
         			
        			if(InicioIanus.ocr2IanusAutomatico){
        				InicioIanus.botonIanus1.setText(InicioIanus.nhcIanus1);
             			InicioIanus.botonIanus2.setText(InicioIanus.nhcIanus2);
        			}
        			else{
        				InicioIanus.botonIanus1.setText(InicioIanus.documentos[numArchivo].nhc);
        				System.out.println("El boton de ianus1 debería poner... " + InicioIanus.documentos[numArchivo].nhc);
        			}
         			
         			InicioIanus.botonServicio.setText(InicioIanus.documentos[numArchivo].servicio);
         			InicioIanus.botonNombreNormalizado.setText(InicioIanus.documentos[numArchivo].nombreNormalizado);
         			
         			if(!InicioIanus.comboServicios.getSelectedItem().toString().equals(InicioIanus.documentos[numArchivo].servicio)){
         				InicioIanus.botonServicio.setBackground(Color.red);
         				Inicio.navegador1.ocrPanel.setBackground(Color.yellow);
         			}
         			else{
         				InicioIanus.botonServicio.setBackground(Color.green);
         				Inicio.navegador1.ocrPanel.setBackground(new Color(255,222,173));
         			}
         			
         			if(numArchivo > 1){
         				if(!InicioIanus.documentos[numArchivo].nhc.equals(InicioIanus.documentos[numArchivo-1].nhc)){
             				Inicio.navegador1.ocrPanel.setBackground(Color.red);
             				Inicio.navegador1.webBrowserPanel.setBackground(Color.red);
             			}
             			else{
             				Inicio.navegador1.ocrPanel.setBackground(new Color(255,222,173));
             				Inicio.navegador1.webBrowserPanel.setBackground(new Color(80,200,120));
             			}
         			}
         			
         			
         			InicioIanus.comboServicios.setSelectedItem(InicioIanus.documentos[numArchivo].servicio);
        			
        			
        		}
        		        		
        		if(triggerVigo){
        				docVigo.subirVigo(InicioIanus.tandaDePdfs[0].getName());
        				if(VentanaExplorador.errorData){
        					docVigo.subirVigoError(InicioIanus.tandaDePdfs[0].getName());
        					VentanaExplorador.errorData = false;
        				}
        			}

        		if((numArchivo + 1<tamañoLista) && InicioIanus.numeroIanus == 2){
        			numArchivo++;
        			listaPdfs.setSelectedIndex(numArchivo);
     			
        			InicioIanus.tandaDePdfs[1] = new File(InicioIanus.rutaCompletaPdfs[numArchivo]);
        			
        			Inicio.navegador2.webBrowser.setVisible(true);
        			Inicio.navegador2.setPdf(InicioIanus.tandaDePdfs[1].getAbsolutePath().toString(),
        					InicioIanus.tandaDePdfs[1].getName().toString(),new Color(255,246,143));
        			            			
            		InicioIanus.numPdfsAbiertos++;   //	Número de pdfs abiertos en pantalla
            		
            		
        		}

        	}
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
        );

        pack();
   /*     if(InicioIanus.coordenadas.grabadas) 
        	setSize(InicioIanus.coordenadas.coordenadas[1].x,InicioIanus.coordenadas.coordenadas[1].y);  */

        
    }// </editor-fold>

    public boolean dudasContestadas(String user){
    	String ruta = InicioIanus.RUTA;

		if(!(new File(ruta).exists())){
			ruta = InicioIanus.RUTAB;
		}
		File ficherosDudas = new File(ruta);
		if(ficherosDudas.exists()){
    		int ind = ruta.lastIndexOf("/");
    		String aux = ruta;
    		aux= ruta.substring(0, ind);
    		aux+= "/99 Dudas/" + InicioIanus.usuario + " C";
    	//	System.out.println(aux);
    		ficherosDudas = new File(aux);
    		if(ficherosDudas.exists()){
      					return true;
    		}
   		}
		
    	
    	return false;
    }

    
    public void cerrarAutoHotKey(){
			
    	String cmd = "taskkill.exe /F /IM ianus.exe /T";
		String cmd2 = "taskkill.exe /F /IM TeclasExperimental.exe /T";
		String cmd3 = "taskkill.exe /F /IM TeclasRapidas.exe /T";
    	
		Process hijo, hijo2, hijo3;
    	try {
    		
    		/*
			Robot robot = new Robot();
			robot.keyPress(KeyEvent.VK_ESCAPE);
			robot.keyRelease(KeyEvent.VK_ESCAPE);
			robot.delay(100);
			
			robot.keyPress(KeyEvent.VK_ESCAPE);
			robot.keyRelease(KeyEvent.VK_ESCAPE);
			robot.delay(100);
			
			robot.keyPress(KeyEvent.VK_ESCAPE);
			robot.keyRelease(KeyEvent.VK_ESCAPE);
			robot.delay(100);
			
			*/
    		
    		hijo = Runtime.getRuntime().exec(cmd);
			hijo2 = Runtime.getRuntime().exec(cmd2);
			hijo3 = Runtime.getRuntime().exec(cmd3);
			
			
			hijo.waitFor();
			hijo2.waitFor();
			hijo3.waitFor();
			
			Thread.sleep(500);
			
			if(InicioIanus.jButtonTeclas != null){
				InicioIanus.jButtonTeclas.setBackground(new Color(255,106,106));
		    	InicioIanus.jButtonTeclas.setText("Teclas Deshabilitadas");
			}
			
			
		
		 } catch (IOException e) {
			System.out.println("Incapaz de matar.");
		 } catch (InterruptedException e) {
			System.out.println("Incapaz de matar.");
		 }
	
 }
		
    
    
		    

    
    public void abrirAutoHotKey(){
      	 File archivo2;
    	 File archivo3 = new File("cal\\ianus.exe");
    	 if(InicioIanus.documentacion != 2 && InicioIanus.documentacion != 3){
    		  archivo2 = new File("cal\\TeclasRapidas.exe");
    	 }
    	 else{
    		 archivo2 = new File("cal\\TeclasExperimental.exe");
    	 }
         
         try {
 			Process p = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + archivo2);
 			
 			InicioIanus.jButtonTeclas.setBackground(new Color(127,255,212));
	    	InicioIanus.jButtonTeclas.setText("Teclas Habilitadas");  
	    	
			if(InicioIanus.documentacion == 2 || InicioIanus.documentacion == 3){
				Process pianus = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + archivo3);
			}
         
         } catch (IOException e1) {
 			// TODO Auto-generated catch block
 			e1.printStackTrace();
 		}
    }
    
    public void crearCarpetaEspejo(String rutaOrigen){
    	
    	File carpetaOrigen = new File(rutaOrigen);
    	File carpetaEspejo = new File(rutaOrigen + "/Espejo");
    	
    	String ficheros[] = carpetaOrigen.list();
    	
    	if(!carpetaEspejo.exists()){
    		carpetaEspejo.mkdirs();
    		System.out.println("Carpeta creada");
    	}
    	
    	for(int i=0;i<ficheros.length;i++){
    		copiarFichero(new File(carpetaOrigen,ficheros[i]), new File(carpetaEspejo,ficheros[i]));
    	}
    	
    }
    
    
    public void copiarFichero(File f1, File f2){
    	
    	if(!f2.exists()){
    	  	try {
    			InputStream in = new FileInputStream(f1);
    			OutputStream out = new FileOutputStream(f2);
    			
    			byte[] buffer = new byte[1024];
    			int len;
    			
    			while((len = in.read(buffer))>0){
    				out.write(buffer,0,len);
    			}
    			
    			in.close();
    			out.close();
    			
    		} catch (FileNotFoundException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		} catch (IOException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    	}
  	
    }
    
    
    
    // Variables declaration - do not modify
    static javax.swing.JList listaPdfs;

    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenu jMenu5; 
    
    private javax.swing.JSeparator jSeparadorVigo;
    private javax.swing.JMenuItem jMenuItemVigo;
    
    private JMenu jMenuV;
    private JMenuItem jMenuItemV1;
    private JMenuItem jMenuItemV2;
    private JMenuItem jMenuItemV3;
    private JSeparator jSeparadorV;
    private JMenuItem jMenuItemV4;
    
    private javax.swing.JMenu jMenu3;
    private javax.swing.JSeparator jSeparadorU;
    private javax.swing.JSeparator jSeparadorM;
    private javax.swing.JSeparator jSeparador01;
    private javax.swing.JSeparator jSeparador02;
    private javax.swing.JSeparator jSeparador03;
   
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem51;
    private javax.swing.JMenuItem jMenuItem52;
    private javax.swing.JMenuItem jMenuItem53;
    private javax.swing.JMenuItem jMenuItem54;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;   
    private javax.swing.JSeparator jSeparadorD;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem32;
    private javax.swing.JMenuItem jMenuItem33;
    private javax.swing.JMenuItem jMenuItem34;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel etiquetaVacia;
    
    private JMenu jMenuCalibre;
    private JMenuItem jMenuItemCon;
    private JMenuItem jMenuItemIng;
    private JMenuItem jMenuItemCma;
    private JMenuItem jMenuItemAn;
    
    private JMenu jMenuNormas;
    private JMenuItem jMenuItemServicio;
    private JMenuItem jMenuItemTodas;
    private JMenu jMenuAñadirNormas;
    private JMenuItem jMenuItemAñadirNormas;
    private JMenuItem jMenuItemAñadirDocumentos;
    private JMenuItem jMenuItemAñadirModelos; 
    private JMenuItem jMenuItemAñadirAvisos;
    
    private javax.swing.JSeparator jSeparador04;
    private javax.swing.JMenu jMenuModificar;
    private javax.swing.JMenuItem jMenuItemModifModelos;
    
    private JMenu jMenuCrono;
    private JMenuItem jMenuItemCrono;
    private JMenuItem jMenuItemEstadistica;
    
    
    private Object[] objetoPuente; 
    private DefaultListModel modelo;
    
	String[] rutaCompletaPdfs;
	static int numArchivo=0;
	static int tamañoLista=0;
	
	boolean dudasResueltas = false;
	
	String[] nombresUsuales = new String[5]; 
	
	static DocumentosVigo docVigo;
	static boolean triggerVigo = false;
	static final int POVISA = 0;
	static final int UVigo = 1;
	
	String carpetaAbierta = "";				//	CarpeConsentimiento Inf.Editable 1ota povisa, para crear carpetaEspejo
	static boolean errorData = false;
    // End of variables declaration
}

class MiHilo extends Thread{
	
	String ruta;
	int numDeLaVentana = 1;
	int delay = 0;
	
	MiHilo(String ruta, int numDeLaVentana, int delay){
		this.ruta = ruta;
		this.numDeLaVentana = numDeLaVentana;
		this.delay = delay;
	}
	
	public void run(){
		
		RecolocaPdf recoloca= new RecolocaPdf();
		recoloca.setA3(ruta, numDeLaVentana, delay);

	}
	
}

